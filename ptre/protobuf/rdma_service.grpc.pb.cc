// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rdma_service.proto

#include "rdma_service.pb.h"
#include "rdma_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ptre {

static const char* Rdma_method_names[] = {
  "/ptre.Rdma/GetLID",
  "/ptre.Rdma/GetQPAttr",
  "/ptre.Rdma/GetRemoteAddress",
  "/ptre.Rdma/GetRemoteParamAddress",
  "/ptre.Rdma/AttemptPush",
  "/ptre.Rdma/AttemptPushVar",
  "/ptre.Rdma/CancelPushVar",
  "/ptre.Rdma/NotifyPushDone",
  "/ptre.Rdma/Barrier",
  "/ptre.Rdma/Recv",
  "/ptre.Rdma/GetRemoteAddressV2",
  "/ptre.Rdma/GetPermit",
};

std::unique_ptr< Rdma::Stub> Rdma::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rdma::Stub> stub(new Rdma::Stub(channel));
  return stub;
}

Rdma::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetLID_(Rdma_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQPAttr_(Rdma_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRemoteAddress_(Rdma_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRemoteParamAddress_(Rdma_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttemptPush_(Rdma_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttemptPushVar_(Rdma_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelPushVar_(Rdma_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyPushDone_(Rdma_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Barrier_(Rdma_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recv_(Rdma_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRemoteAddressV2_(Rdma_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermit_(Rdma_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rdma::Stub::GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::ptre::GetLIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLID_, context, request, response);
}

void Rdma::Stub::experimental_async::GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLID_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLID_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLID_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>* Rdma::Stub::AsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetLIDResponse>::Create(channel_.get(), cq, rpcmethod_GetLID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>* Rdma::Stub::PrepareAsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetLIDResponse>::Create(channel_.get(), cq, rpcmethod_GetLID_, context, request, false);
}

::grpc::Status Rdma::Stub::GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::ptre::GetQPAttrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetQPAttr_, context, request, response);
}

void Rdma::Stub::experimental_async::GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQPAttr_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQPAttr_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQPAttr_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQPAttr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>* Rdma::Stub::AsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetQPAttrResponse>::Create(channel_.get(), cq, rpcmethod_GetQPAttr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>* Rdma::Stub::PrepareAsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetQPAttrResponse>::Create(channel_.get(), cq, rpcmethod_GetQPAttr_, context, request, false);
}

::grpc::Status Rdma::Stub::GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::ptre::GetRemoteAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteAddress_, context, request, response);
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* Rdma::Stub::AsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* Rdma::Stub::PrepareAsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddress_, context, request, false);
}

::grpc::Status Rdma::Stub::GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::ptre::GetRemoteParamAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteParamAddress_, context, request, response);
}

void Rdma::Stub::experimental_async::GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteParamAddress_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteParamAddress_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteParamAddress_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteParamAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>* Rdma::Stub::AsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteParamAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteParamAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>* Rdma::Stub::PrepareAsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteParamAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteParamAddress_, context, request, false);
}

::grpc::Status Rdma::Stub::AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::ptre::AttemptPushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AttemptPush_, context, request, response);
}

void Rdma::Stub::experimental_async::AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AttemptPush_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AttemptPush_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AttemptPush_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AttemptPush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>* Rdma::Stub::AsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::AttemptPushResponse>::Create(channel_.get(), cq, rpcmethod_AttemptPush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>* Rdma::Stub::PrepareAsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::AttemptPushResponse>::Create(channel_.get(), cq, rpcmethod_AttemptPush_, context, request, false);
}

::grpc::Status Rdma::Stub::AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::ptre::AttemptPushVarResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AttemptPushVar_, context, request, response);
}

void Rdma::Stub::experimental_async::AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AttemptPushVar_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AttemptPushVar_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AttemptPushVar_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AttemptPushVar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>* Rdma::Stub::AsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::AttemptPushVarResponse>::Create(channel_.get(), cq, rpcmethod_AttemptPushVar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>* Rdma::Stub::PrepareAsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::AttemptPushVarResponse>::Create(channel_.get(), cq, rpcmethod_AttemptPushVar_, context, request, false);
}

::grpc::Status Rdma::Stub::CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::ptre::CancelPushVarResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelPushVar_, context, request, response);
}

void Rdma::Stub::experimental_async::CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelPushVar_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelPushVar_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelPushVar_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelPushVar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>* Rdma::Stub::AsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::CancelPushVarResponse>::Create(channel_.get(), cq, rpcmethod_CancelPushVar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>* Rdma::Stub::PrepareAsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::CancelPushVarResponse>::Create(channel_.get(), cq, rpcmethod_CancelPushVar_, context, request, false);
}

::grpc::Status Rdma::Stub::NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::ptre::NotifyPushDoneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NotifyPushDone_, context, request, response);
}

void Rdma::Stub::experimental_async::NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NotifyPushDone_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NotifyPushDone_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NotifyPushDone_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NotifyPushDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>* Rdma::Stub::AsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::NotifyPushDoneResponse>::Create(channel_.get(), cq, rpcmethod_NotifyPushDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>* Rdma::Stub::PrepareAsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::NotifyPushDoneResponse>::Create(channel_.get(), cq, rpcmethod_NotifyPushDone_, context, request, false);
}

::grpc::Status Rdma::Stub::Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::ptre::BarrierResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Barrier_, context, request, response);
}

void Rdma::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>* Rdma::Stub::AsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::BarrierResponse>::Create(channel_.get(), cq, rpcmethod_Barrier_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>* Rdma::Stub::PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::BarrierResponse>::Create(channel_.get(), cq, rpcmethod_Barrier_, context, request, false);
}

::grpc::Status Rdma::Stub::Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::ptre::RecvResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recv_, context, request, response);
}

void Rdma::Stub::experimental_async::Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recv_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recv_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recv_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>* Rdma::Stub::AsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::RecvResponse>::Create(channel_.get(), cq, rpcmethod_Recv_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>* Rdma::Stub::PrepareAsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::RecvResponse>::Create(channel_.get(), cq, rpcmethod_Recv_, context, request, false);
}

::grpc::Status Rdma::Stub::GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::ptre::GetRemoteAddressV2Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteAddressV2_, context, request, response);
}

void Rdma::Stub::experimental_async::GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddressV2_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddressV2_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddressV2_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddressV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>* Rdma::Stub::AsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressV2Response>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddressV2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>* Rdma::Stub::PrepareAsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressV2Response>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddressV2_, context, request, false);
}

::grpc::Status Rdma::Stub::GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::ptre::GetPermitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPermit_, context, request, response);
}

void Rdma::Stub::experimental_async::GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPermit_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPermit_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPermit_, context, request, response, reactor);
}

void Rdma::Stub::experimental_async::GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPermit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>* Rdma::Stub::AsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetPermitResponse>::Create(channel_.get(), cq, rpcmethod_GetPermit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>* Rdma::Stub::PrepareAsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ptre::GetPermitResponse>::Create(channel_.get(), cq, rpcmethod_GetPermit_, context, request, false);
}

Rdma::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetLIDRequest, ::ptre::GetLIDResponse>(
          std::mem_fn(&Rdma::Service::GetLID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetQPAttrRequest, ::ptre::GetQPAttrResponse>(
          std::mem_fn(&Rdma::Service::GetQPAttr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>(
          std::mem_fn(&Rdma::Service::GetRemoteAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetRemoteParamAddressRequest, ::ptre::GetRemoteParamAddressResponse>(
          std::mem_fn(&Rdma::Service::GetRemoteParamAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::AttemptPushRequest, ::ptre::AttemptPushResponse>(
          std::mem_fn(&Rdma::Service::AttemptPush), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::AttemptPushVarRequest, ::ptre::AttemptPushVarResponse>(
          std::mem_fn(&Rdma::Service::AttemptPushVar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::CancelPushVarRequest, ::ptre::CancelPushVarResponse>(
          std::mem_fn(&Rdma::Service::CancelPushVar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::NotifyPushDoneRequest, ::ptre::NotifyPushDoneResponse>(
          std::mem_fn(&Rdma::Service::NotifyPushDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::BarrierRequest, ::ptre::BarrierResponse>(
          std::mem_fn(&Rdma::Service::Barrier), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::RecvRequest, ::ptre::RecvResponse>(
          std::mem_fn(&Rdma::Service::Recv), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetRemoteAddressV2Request, ::ptre::GetRemoteAddressV2Response>(
          std::mem_fn(&Rdma::Service::GetRemoteAddressV2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetPermitRequest, ::ptre::GetPermitResponse>(
          std::mem_fn(&Rdma::Service::GetPermit), this)));
}

Rdma::Service::~Service() {
}

::grpc::Status Rdma::Service::GetLID(::grpc::ServerContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::GetQPAttr(::grpc::ServerContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::GetRemoteAddress(::grpc::ServerContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::GetRemoteParamAddress(::grpc::ServerContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::AttemptPush(::grpc::ServerContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::AttemptPushVar(::grpc::ServerContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::CancelPushVar(::grpc::ServerContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::NotifyPushDone(::grpc::ServerContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::Barrier(::grpc::ServerContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::Recv(::grpc::ServerContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::GetRemoteAddressV2(::grpc::ServerContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rdma::Service::GetPermit(::grpc::ServerContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ptre

