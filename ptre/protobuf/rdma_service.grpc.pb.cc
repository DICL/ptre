// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rdma_service.proto

#include "rdma_service.pb.h"
#include "rdma_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ptre {

static const char* Rdma_method_names[] = {
  "/ptre.Rdma/GetRemoteAddress",
};

std::unique_ptr< Rdma::Stub> Rdma::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rdma::Stub> stub(new Rdma::Stub(channel));
  return stub;
}

Rdma::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRemoteAddress_(Rdma_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rdma::Stub::GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::ptre::GetRemoteAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteAddress_, context, request, response);
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, std::move(f));
}

void Rdma::Stub::experimental_async::GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteAddress_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* Rdma::Stub::AsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* Rdma::Stub::PrepareAsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ptre::GetRemoteAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetRemoteAddress_, context, request, false);
}

Rdma::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rdma_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rdma::Service, ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>(
          std::mem_fn(&Rdma::Service::GetRemoteAddress), this)));
}

Rdma::Service::~Service() {
}

::grpc::Status Rdma::Service::GetRemoteAddress(::grpc::ServerContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ptre

