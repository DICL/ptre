// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rdma_service.proto
#ifndef GRPC_rdma_5fservice_2eproto__INCLUDED
#define GRPC_rdma_5fservice_2eproto__INCLUDED

#include "rdma_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace ptre {

class Rdma final {
 public:
  static constexpr char const* service_full_name() {
    return "ptre.Rdma";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::ptre::GetLIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>> AsyncGetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>>(AsyncGetLIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>> PrepareAsyncGetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>>(PrepareAsyncGetLIDRaw(context, request, cq));
    }
    virtual ::grpc::Status GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::ptre::GetQPAttrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>> AsyncGetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>>(AsyncGetQPAttrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>> PrepareAsyncGetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>>(PrepareAsyncGetQPAttrRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::ptre::GetRemoteAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>> AsyncGetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>>(AsyncGetRemoteAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>> PrepareAsyncGetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>>(PrepareAsyncGetRemoteAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::ptre::GetRemoteParamAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>> AsyncGetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>>(AsyncGetRemoteParamAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>> PrepareAsyncGetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>>(PrepareAsyncGetRemoteParamAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::ptre::AttemptPushResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>> AsyncAttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>>(AsyncAttemptPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>> PrepareAsyncAttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>>(PrepareAsyncAttemptPushRaw(context, request, cq));
    }
    virtual ::grpc::Status AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::ptre::AttemptPushVarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>> AsyncAttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>>(AsyncAttemptPushVarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>> PrepareAsyncAttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>>(PrepareAsyncAttemptPushVarRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::ptre::CancelPushVarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>> AsyncCancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>>(AsyncCancelPushVarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>> PrepareAsyncCancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>>(PrepareAsyncCancelPushVarRaw(context, request, cq));
    }
    virtual ::grpc::Status NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::ptre::NotifyPushDoneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>> AsyncNotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>>(AsyncNotifyPushDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>> PrepareAsyncNotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>>(PrepareAsyncNotifyPushDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::ptre::BarrierResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    virtual ::grpc::Status Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::ptre::RecvResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>> AsyncRecv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>>(AsyncRecvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>> PrepareAsyncRecv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>>(PrepareAsyncRecvRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::ptre::GetRemoteAddressV2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>> AsyncGetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>>(AsyncGetRemoteAddressV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>> PrepareAsyncGetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>>(PrepareAsyncGetRemoteAddressV2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::ptre::GetPermitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>> AsyncGetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>>(AsyncGetPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>> PrepareAsyncGetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>>(PrepareAsyncGetPermitRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>* AsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetLIDResponse>* PrepareAsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>* AsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetQPAttrResponse>* PrepareAsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>* AsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressResponse>* PrepareAsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>* AsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteParamAddressResponse>* PrepareAsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>* AsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushResponse>* PrepareAsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>* AsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::AttemptPushVarResponse>* PrepareAsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>* AsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::CancelPushVarResponse>* PrepareAsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>* AsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::NotifyPushDoneResponse>* PrepareAsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>* AsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::RecvResponse>* PrepareAsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>* AsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetRemoteAddressV2Response>* PrepareAsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>* AsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ptre::GetPermitResponse>* PrepareAsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::ptre::GetLIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>> AsyncGetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>>(AsyncGetLIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>> PrepareAsyncGetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>>(PrepareAsyncGetLIDRaw(context, request, cq));
    }
    ::grpc::Status GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::ptre::GetQPAttrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>> AsyncGetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>>(AsyncGetQPAttrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>> PrepareAsyncGetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>>(PrepareAsyncGetQPAttrRaw(context, request, cq));
    }
    ::grpc::Status GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::ptre::GetRemoteAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>> AsyncGetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>>(AsyncGetRemoteAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>> PrepareAsyncGetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>>(PrepareAsyncGetRemoteAddressRaw(context, request, cq));
    }
    ::grpc::Status GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::ptre::GetRemoteParamAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>> AsyncGetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>>(AsyncGetRemoteParamAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>> PrepareAsyncGetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>>(PrepareAsyncGetRemoteParamAddressRaw(context, request, cq));
    }
    ::grpc::Status AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::ptre::AttemptPushResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>> AsyncAttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>>(AsyncAttemptPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>> PrepareAsyncAttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>>(PrepareAsyncAttemptPushRaw(context, request, cq));
    }
    ::grpc::Status AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::ptre::AttemptPushVarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>> AsyncAttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>>(AsyncAttemptPushVarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>> PrepareAsyncAttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>>(PrepareAsyncAttemptPushVarRaw(context, request, cq));
    }
    ::grpc::Status CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::ptre::CancelPushVarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>> AsyncCancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>>(AsyncCancelPushVarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>> PrepareAsyncCancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>>(PrepareAsyncCancelPushVarRaw(context, request, cq));
    }
    ::grpc::Status NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::ptre::NotifyPushDoneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>> AsyncNotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>>(AsyncNotifyPushDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>> PrepareAsyncNotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>>(PrepareAsyncNotifyPushDoneRaw(context, request, cq));
    }
    ::grpc::Status Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::ptre::BarrierResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    ::grpc::Status Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::ptre::RecvResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>> AsyncRecv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>>(AsyncRecvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>> PrepareAsyncRecv(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>>(PrepareAsyncRecvRaw(context, request, cq));
    }
    ::grpc::Status GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::ptre::GetRemoteAddressV2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>> AsyncGetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>>(AsyncGetRemoteAddressV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>> PrepareAsyncGetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>>(PrepareAsyncGetRemoteAddressV2Raw(context, request, cq));
    }
    ::grpc::Status GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::ptre::GetPermitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>> AsyncGetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>>(AsyncGetPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>> PrepareAsyncGetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>>(PrepareAsyncGetPermitRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLID(::grpc::ClientContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetLIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)>) override;
      void GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, std::function<void(::grpc::Status)>) override;
      void GetQPAttr(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetQPAttr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetQPAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteParamAddress(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteParamAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteParamAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)>) override;
      void AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, std::function<void(::grpc::Status)>) override;
      void AttemptPush(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AttemptPush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)>) override;
      void AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, std::function<void(::grpc::Status)>) override;
      void AttemptPushVar(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AttemptPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::AttemptPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelPushVar(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CancelPushVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::CancelPushVarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)>) override;
      void NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, std::function<void(::grpc::Status)>) override;
      void NotifyPushDone(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NotifyPushDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::NotifyPushDoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)>) override;
      void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, std::function<void(::grpc::Status)>) override;
      void Barrier(::grpc::ClientContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)>) override;
      void Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, std::function<void(::grpc::Status)>) override;
      void Recv(::grpc::ClientContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::RecvResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteAddressV2(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRemoteAddressV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetRemoteAddressV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPermit(::grpc::ClientContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetPermit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ptre::GetPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>* AsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetLIDResponse>* PrepareAsyncGetLIDRaw(::grpc::ClientContext* context, const ::ptre::GetLIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>* AsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetQPAttrResponse>* PrepareAsyncGetQPAttrRaw(::grpc::ClientContext* context, const ::ptre::GetQPAttrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* AsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressResponse>* PrepareAsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>* AsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteParamAddressResponse>* PrepareAsyncGetRemoteParamAddressRaw(::grpc::ClientContext* context, const ::ptre::GetRemoteParamAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>* AsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushResponse>* PrepareAsyncAttemptPushRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>* AsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::AttemptPushVarResponse>* PrepareAsyncAttemptPushVarRaw(::grpc::ClientContext* context, const ::ptre::AttemptPushVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>* AsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::CancelPushVarResponse>* PrepareAsyncCancelPushVarRaw(::grpc::ClientContext* context, const ::ptre::CancelPushVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>* AsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::NotifyPushDoneResponse>* PrepareAsyncNotifyPushDoneRaw(::grpc::ClientContext* context, const ::ptre::NotifyPushDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::ptre::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>* AsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::RecvResponse>* PrepareAsyncRecvRaw(::grpc::ClientContext* context, const ::ptre::RecvRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>* AsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetRemoteAddressV2Response>* PrepareAsyncGetRemoteAddressV2Raw(::grpc::ClientContext* context, const ::ptre::GetRemoteAddressV2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>* AsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ptre::GetPermitResponse>* PrepareAsyncGetPermitRaw(::grpc::ClientContext* context, const ::ptre::GetPermitRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQPAttr_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteParamAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_AttemptPush_;
    const ::grpc::internal::RpcMethod rpcmethod_AttemptPushVar_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelPushVar_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyPushDone_;
    const ::grpc::internal::RpcMethod rpcmethod_Barrier_;
    const ::grpc::internal::RpcMethod rpcmethod_Recv_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteAddressV2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermit_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetLID(::grpc::ServerContext* context, const ::ptre::GetLIDRequest* request, ::ptre::GetLIDResponse* response);
    virtual ::grpc::Status GetQPAttr(::grpc::ServerContext* context, const ::ptre::GetQPAttrRequest* request, ::ptre::GetQPAttrResponse* response);
    virtual ::grpc::Status GetRemoteAddress(::grpc::ServerContext* context, const ::ptre::GetRemoteAddressRequest* request, ::ptre::GetRemoteAddressResponse* response);
    virtual ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* context, const ::ptre::GetRemoteParamAddressRequest* request, ::ptre::GetRemoteParamAddressResponse* response);
    virtual ::grpc::Status AttemptPush(::grpc::ServerContext* context, const ::ptre::AttemptPushRequest* request, ::ptre::AttemptPushResponse* response);
    virtual ::grpc::Status AttemptPushVar(::grpc::ServerContext* context, const ::ptre::AttemptPushVarRequest* request, ::ptre::AttemptPushVarResponse* response);
    virtual ::grpc::Status CancelPushVar(::grpc::ServerContext* context, const ::ptre::CancelPushVarRequest* request, ::ptre::CancelPushVarResponse* response);
    virtual ::grpc::Status NotifyPushDone(::grpc::ServerContext* context, const ::ptre::NotifyPushDoneRequest* request, ::ptre::NotifyPushDoneResponse* response);
    virtual ::grpc::Status Barrier(::grpc::ServerContext* context, const ::ptre::BarrierRequest* request, ::ptre::BarrierResponse* response);
    virtual ::grpc::Status Recv(::grpc::ServerContext* context, const ::ptre::RecvRequest* request, ::ptre::RecvResponse* response);
    virtual ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* context, const ::ptre::GetRemoteAddressV2Request* request, ::ptre::GetRemoteAddressV2Response* response);
    virtual ::grpc::Status GetPermit(::grpc::ServerContext* context, const ::ptre::GetPermitRequest* request, ::ptre::GetPermitResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLID() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLID(::grpc::ServerContext* context, ::ptre::GetLIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetLIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQPAttr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQPAttr(::grpc::ServerContext* context, ::ptre::GetQPAttrRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetQPAttrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteAddress() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteAddress(::grpc::ServerContext* context, ::ptre::GetRemoteAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetRemoteAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteParamAddress() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteParamAddress(::grpc::ServerContext* context, ::ptre::GetRemoteParamAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetRemoteParamAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AttemptPush() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttemptPush(::grpc::ServerContext* context, ::ptre::AttemptPushRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::AttemptPushResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AttemptPushVar() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttemptPushVar(::grpc::ServerContext* context, ::ptre::AttemptPushVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::AttemptPushVarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelPushVar() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelPushVar(::grpc::ServerContext* context, ::ptre::CancelPushVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::CancelPushVarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyPushDone() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyPushDone(::grpc::ServerContext* context, ::ptre::NotifyPushDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::NotifyPushDoneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Barrier() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::ptre::BarrierRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::BarrierResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Recv() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecv(::grpc::ServerContext* context, ::ptre::RecvRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::RecvResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteAddressV2() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteAddressV2(::grpc::ServerContext* context, ::ptre::GetRemoteAddressV2Request* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetRemoteAddressV2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermit() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermit(::grpc::ServerContext* context, ::ptre::GetPermitRequest* request, ::grpc::ServerAsyncResponseWriter< ::ptre::GetPermitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLID<WithAsyncMethod_GetQPAttr<WithAsyncMethod_GetRemoteAddress<WithAsyncMethod_GetRemoteParamAddress<WithAsyncMethod_AttemptPush<WithAsyncMethod_AttemptPushVar<WithAsyncMethod_CancelPushVar<WithAsyncMethod_NotifyPushDone<WithAsyncMethod_Barrier<WithAsyncMethod_Recv<WithAsyncMethod_GetRemoteAddressV2<WithAsyncMethod_GetPermit<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLID() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetLIDRequest, ::ptre::GetLIDResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetLIDRequest* request,
                 ::ptre::GetLIDResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLID(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLID(
        ::grpc::experimental::MessageAllocator< ::ptre::GetLIDRequest, ::ptre::GetLIDResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetLIDRequest, ::ptre::GetLIDResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetQPAttr() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetQPAttrRequest, ::ptre::GetQPAttrResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetQPAttrRequest* request,
                 ::ptre::GetQPAttrResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetQPAttr(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetQPAttr(
        ::grpc::experimental::MessageAllocator< ::ptre::GetQPAttrRequest, ::ptre::GetQPAttrResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetQPAttrRequest, ::ptre::GetQPAttrResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteAddress() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetRemoteAddressRequest* request,
                 ::ptre::GetRemoteAddressResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRemoteAddress(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRemoteAddress(
        ::grpc::experimental::MessageAllocator< ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteParamAddress() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteParamAddressRequest, ::ptre::GetRemoteParamAddressResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetRemoteParamAddressRequest* request,
                 ::ptre::GetRemoteParamAddressResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRemoteParamAddress(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRemoteParamAddress(
        ::grpc::experimental::MessageAllocator< ::ptre::GetRemoteParamAddressRequest, ::ptre::GetRemoteParamAddressResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteParamAddressRequest, ::ptre::GetRemoteParamAddressResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AttemptPush() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::AttemptPushRequest, ::ptre::AttemptPushResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::AttemptPushRequest* request,
                 ::ptre::AttemptPushResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AttemptPush(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AttemptPush(
        ::grpc::experimental::MessageAllocator< ::ptre::AttemptPushRequest, ::ptre::AttemptPushResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::AttemptPushRequest, ::ptre::AttemptPushResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AttemptPushVar() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::AttemptPushVarRequest, ::ptre::AttemptPushVarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::AttemptPushVarRequest* request,
                 ::ptre::AttemptPushVarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AttemptPushVar(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AttemptPushVar(
        ::grpc::experimental::MessageAllocator< ::ptre::AttemptPushVarRequest, ::ptre::AttemptPushVarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::AttemptPushVarRequest, ::ptre::AttemptPushVarResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CancelPushVar() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::CancelPushVarRequest, ::ptre::CancelPushVarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::CancelPushVarRequest* request,
                 ::ptre::CancelPushVarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CancelPushVar(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CancelPushVar(
        ::grpc::experimental::MessageAllocator< ::ptre::CancelPushVarRequest, ::ptre::CancelPushVarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::CancelPushVarRequest, ::ptre::CancelPushVarResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NotifyPushDone() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::NotifyPushDoneRequest, ::ptre::NotifyPushDoneResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::NotifyPushDoneRequest* request,
                 ::ptre::NotifyPushDoneResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NotifyPushDone(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NotifyPushDone(
        ::grpc::experimental::MessageAllocator< ::ptre::NotifyPushDoneRequest, ::ptre::NotifyPushDoneResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::NotifyPushDoneRequest, ::ptre::NotifyPushDoneResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Barrier() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::BarrierRequest, ::ptre::BarrierResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::BarrierRequest* request,
                 ::ptre::BarrierResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Barrier(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Barrier(
        ::grpc::experimental::MessageAllocator< ::ptre::BarrierRequest, ::ptre::BarrierResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::BarrierRequest, ::ptre::BarrierResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Recv() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::RecvRequest, ::ptre::RecvResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::RecvRequest* request,
                 ::ptre::RecvResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Recv(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Recv(
        ::grpc::experimental::MessageAllocator< ::ptre::RecvRequest, ::ptre::RecvResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::RecvRequest, ::ptre::RecvResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteAddressV2() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteAddressV2Request, ::ptre::GetRemoteAddressV2Response>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetRemoteAddressV2Request* request,
                 ::ptre::GetRemoteAddressV2Response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRemoteAddressV2(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRemoteAddressV2(
        ::grpc::experimental::MessageAllocator< ::ptre::GetRemoteAddressV2Request, ::ptre::GetRemoteAddressV2Response>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetRemoteAddressV2Request, ::ptre::GetRemoteAddressV2Response>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPermit() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetPermitRequest, ::ptre::GetPermitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ptre::GetPermitRequest* request,
                 ::ptre::GetPermitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPermit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetPermit(
        ::grpc::experimental::MessageAllocator< ::ptre::GetPermitRequest, ::ptre::GetPermitResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ptre::GetPermitRequest, ::ptre::GetPermitResponse>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetLID<ExperimentalWithCallbackMethod_GetQPAttr<ExperimentalWithCallbackMethod_GetRemoteAddress<ExperimentalWithCallbackMethod_GetRemoteParamAddress<ExperimentalWithCallbackMethod_AttemptPush<ExperimentalWithCallbackMethod_AttemptPushVar<ExperimentalWithCallbackMethod_CancelPushVar<ExperimentalWithCallbackMethod_NotifyPushDone<ExperimentalWithCallbackMethod_Barrier<ExperimentalWithCallbackMethod_Recv<ExperimentalWithCallbackMethod_GetRemoteAddressV2<ExperimentalWithCallbackMethod_GetPermit<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLID() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQPAttr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteAddress() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteParamAddress() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AttemptPush() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AttemptPushVar() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelPushVar() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyPushDone() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Barrier() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Recv() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteAddressV2() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermit() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLID() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQPAttr() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQPAttr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteAddress() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteParamAddress() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteParamAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AttemptPush() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttemptPush(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AttemptPushVar() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttemptPushVar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelPushVar() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelPushVar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyPushDone() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyPushDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Barrier() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Recv() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteAddressV2() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteAddressV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermit() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLID() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLID(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetQPAttr() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetQPAttr(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetQPAttr(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteAddress() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRemoteAddress(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteParamAddress() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRemoteParamAddress(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AttemptPush() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AttemptPush(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AttemptPush(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AttemptPushVar() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AttemptPushVar(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AttemptPushVar(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelPushVar() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CancelPushVar(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CancelPushVar(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NotifyPushDone() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NotifyPushDone(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NotifyPushDone(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Barrier() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Barrier(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Barrier(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Recv(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteAddressV2() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRemoteAddressV2(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPermit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPermit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPermit(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLID() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetLIDRequest, ::ptre::GetLIDResponse>(std::bind(&WithStreamedUnaryMethod_GetLID<BaseClass>::StreamedGetLID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLID(::grpc::ServerContext* /*context*/, const ::ptre::GetLIDRequest* /*request*/, ::ptre::GetLIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetLIDRequest,::ptre::GetLIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQPAttr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQPAttr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetQPAttrRequest, ::ptre::GetQPAttrResponse>(std::bind(&WithStreamedUnaryMethod_GetQPAttr<BaseClass>::StreamedGetQPAttr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetQPAttr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQPAttr(::grpc::ServerContext* /*context*/, const ::ptre::GetQPAttrRequest* /*request*/, ::ptre::GetQPAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQPAttr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetQPAttrRequest,::ptre::GetQPAttrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemoteAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemoteAddress() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetRemoteAddressRequest, ::ptre::GetRemoteAddressResponse>(std::bind(&WithStreamedUnaryMethod_GetRemoteAddress<BaseClass>::StreamedGetRemoteAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRemoteAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressRequest* /*request*/, ::ptre::GetRemoteAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemoteAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetRemoteAddressRequest,::ptre::GetRemoteAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemoteParamAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemoteParamAddress() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetRemoteParamAddressRequest, ::ptre::GetRemoteParamAddressResponse>(std::bind(&WithStreamedUnaryMethod_GetRemoteParamAddress<BaseClass>::StreamedGetRemoteParamAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRemoteParamAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteParamAddress(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteParamAddressRequest* /*request*/, ::ptre::GetRemoteParamAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemoteParamAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetRemoteParamAddressRequest,::ptre::GetRemoteParamAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AttemptPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AttemptPush() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::AttemptPushRequest, ::ptre::AttemptPushResponse>(std::bind(&WithStreamedUnaryMethod_AttemptPush<BaseClass>::StreamedAttemptPush, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AttemptPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AttemptPush(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushRequest* /*request*/, ::ptre::AttemptPushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAttemptPush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::AttemptPushRequest,::ptre::AttemptPushResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AttemptPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AttemptPushVar() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::AttemptPushVarRequest, ::ptre::AttemptPushVarResponse>(std::bind(&WithStreamedUnaryMethod_AttemptPushVar<BaseClass>::StreamedAttemptPushVar, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AttemptPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AttemptPushVar(::grpc::ServerContext* /*context*/, const ::ptre::AttemptPushVarRequest* /*request*/, ::ptre::AttemptPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAttemptPushVar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::AttemptPushVarRequest,::ptre::AttemptPushVarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelPushVar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelPushVar() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::CancelPushVarRequest, ::ptre::CancelPushVarResponse>(std::bind(&WithStreamedUnaryMethod_CancelPushVar<BaseClass>::StreamedCancelPushVar, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CancelPushVar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelPushVar(::grpc::ServerContext* /*context*/, const ::ptre::CancelPushVarRequest* /*request*/, ::ptre::CancelPushVarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelPushVar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::CancelPushVarRequest,::ptre::CancelPushVarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyPushDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyPushDone() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::NotifyPushDoneRequest, ::ptre::NotifyPushDoneResponse>(std::bind(&WithStreamedUnaryMethod_NotifyPushDone<BaseClass>::StreamedNotifyPushDone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NotifyPushDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyPushDone(::grpc::ServerContext* /*context*/, const ::ptre::NotifyPushDoneRequest* /*request*/, ::ptre::NotifyPushDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyPushDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::NotifyPushDoneRequest,::ptre::NotifyPushDoneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Barrier() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::BarrierRequest, ::ptre::BarrierResponse>(std::bind(&WithStreamedUnaryMethod_Barrier<BaseClass>::StreamedBarrier, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::ptre::BarrierRequest* /*request*/, ::ptre::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBarrier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::BarrierRequest,::ptre::BarrierResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Recv() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::RecvRequest, ::ptre::RecvResponse>(std::bind(&WithStreamedUnaryMethod_Recv<BaseClass>::StreamedRecv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Recv(::grpc::ServerContext* /*context*/, const ::ptre::RecvRequest* /*request*/, ::ptre::RecvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::RecvRequest,::ptre::RecvResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemoteAddressV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemoteAddressV2() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetRemoteAddressV2Request, ::ptre::GetRemoteAddressV2Response>(std::bind(&WithStreamedUnaryMethod_GetRemoteAddressV2<BaseClass>::StreamedGetRemoteAddressV2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRemoteAddressV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteAddressV2(::grpc::ServerContext* /*context*/, const ::ptre::GetRemoteAddressV2Request* /*request*/, ::ptre::GetRemoteAddressV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemoteAddressV2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetRemoteAddressV2Request,::ptre::GetRemoteAddressV2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermit() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::ptre::GetPermitRequest, ::ptre::GetPermitResponse>(std::bind(&WithStreamedUnaryMethod_GetPermit<BaseClass>::StreamedGetPermit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermit(::grpc::ServerContext* /*context*/, const ::ptre::GetPermitRequest* /*request*/, ::ptre::GetPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ptre::GetPermitRequest,::ptre::GetPermitResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLID<WithStreamedUnaryMethod_GetQPAttr<WithStreamedUnaryMethod_GetRemoteAddress<WithStreamedUnaryMethod_GetRemoteParamAddress<WithStreamedUnaryMethod_AttemptPush<WithStreamedUnaryMethod_AttemptPushVar<WithStreamedUnaryMethod_CancelPushVar<WithStreamedUnaryMethod_NotifyPushDone<WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Recv<WithStreamedUnaryMethod_GetRemoteAddressV2<WithStreamedUnaryMethod_GetPermit<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLID<WithStreamedUnaryMethod_GetQPAttr<WithStreamedUnaryMethod_GetRemoteAddress<WithStreamedUnaryMethod_GetRemoteParamAddress<WithStreamedUnaryMethod_AttemptPush<WithStreamedUnaryMethod_AttemptPushVar<WithStreamedUnaryMethod_CancelPushVar<WithStreamedUnaryMethod_NotifyPushDone<WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Recv<WithStreamedUnaryMethod_GetRemoteAddressV2<WithStreamedUnaryMethod_GetPermit<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace ptre


#endif  // GRPC_rdma_5fservice_2eproto__INCLUDED
