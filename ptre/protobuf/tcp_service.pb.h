// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tcp_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tcp_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tcp_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tcp_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tcp_5fservice_2eproto;
namespace ptre {
namespace common {
class PullTensorRequest;
class PullTensorRequestDefaultTypeInternal;
extern PullTensorRequestDefaultTypeInternal _PullTensorRequest_default_instance_;
class PullTensorResponse;
class PullTensorResponseDefaultTypeInternal;
extern PullTensorResponseDefaultTypeInternal _PullTensorResponse_default_instance_;
class PushTensorRequest;
class PushTensorRequestDefaultTypeInternal;
extern PushTensorRequestDefaultTypeInternal _PushTensorRequest_default_instance_;
class PushTensorResponse;
class PushTensorResponseDefaultTypeInternal;
extern PushTensorResponseDefaultTypeInternal _PushTensorResponse_default_instance_;
}  // namespace common
}  // namespace ptre
PROTOBUF_NAMESPACE_OPEN
template<> ::ptre::common::PullTensorRequest* Arena::CreateMaybeMessage<::ptre::common::PullTensorRequest>(Arena*);
template<> ::ptre::common::PullTensorResponse* Arena::CreateMaybeMessage<::ptre::common::PullTensorResponse>(Arena*);
template<> ::ptre::common::PushTensorRequest* Arena::CreateMaybeMessage<::ptre::common::PushTensorRequest>(Arena*);
template<> ::ptre::common::PushTensorResponse* Arena::CreateMaybeMessage<::ptre::common::PushTensorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ptre {
namespace common {

enum P2PSyncMode : int {
  P2P_SYNC_MODE_STEP = 0,
  P2PSyncMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  P2PSyncMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool P2PSyncMode_IsValid(int value);
constexpr P2PSyncMode P2PSyncMode_MIN = P2P_SYNC_MODE_STEP;
constexpr P2PSyncMode P2PSyncMode_MAX = P2P_SYNC_MODE_STEP;
constexpr int P2PSyncMode_ARRAYSIZE = P2PSyncMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2PSyncMode_descriptor();
template<typename T>
inline const std::string& P2PSyncMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, P2PSyncMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function P2PSyncMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    P2PSyncMode_descriptor(), enum_t_value);
}
inline bool P2PSyncMode_Parse(
    const std::string& name, P2PSyncMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<P2PSyncMode>(
    P2PSyncMode_descriptor(), name, value);
}
// ===================================================================

class PullTensorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.PullTensorRequest) */ {
 public:
  PullTensorRequest();
  virtual ~PullTensorRequest();

  PullTensorRequest(const PullTensorRequest& from);
  PullTensorRequest(PullTensorRequest&& from) noexcept
    : PullTensorRequest() {
    *this = ::std::move(from);
  }

  inline PullTensorRequest& operator=(const PullTensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullTensorRequest& operator=(PullTensorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullTensorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullTensorRequest* internal_default_instance() {
    return reinterpret_cast<const PullTensorRequest*>(
               &_PullTensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PullTensorRequest* other);
  friend void swap(PullTensorRequest& a, PullTensorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullTensorRequest* New() const final {
    return CreateMaybeMessage<PullTensorRequest>(nullptr);
  }

  PullTensorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullTensorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullTensorRequest& from);
  void MergeFrom(const PullTensorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullTensorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.PullTensorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fservice_2eproto);
    return ::descriptor_table_tcp_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);

  // int32 src_rank = 1;
  void clear_src_rank();
  static const int kSrcRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 src_rank() const;
  void set_src_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 src_step = 3;
  void clear_src_step();
  static const int kSrcStepFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 src_step() const;
  void set_src_step(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .ptre.common.P2PSyncMode sync_mode = 4;
  void clear_sync_mode();
  static const int kSyncModeFieldNumber = 4;
  ::ptre::common::P2PSyncMode sync_mode() const;
  void set_sync_mode(::ptre::common::P2PSyncMode value);

  // @@protoc_insertion_point(class_scope:ptre.common.PullTensorRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_step_;
  int sync_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PullTensorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.PullTensorResponse) */ {
 public:
  PullTensorResponse();
  virtual ~PullTensorResponse();

  PullTensorResponse(const PullTensorResponse& from);
  PullTensorResponse(PullTensorResponse&& from) noexcept
    : PullTensorResponse() {
    *this = ::std::move(from);
  }

  inline PullTensorResponse& operator=(const PullTensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullTensorResponse& operator=(PullTensorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullTensorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullTensorResponse* internal_default_instance() {
    return reinterpret_cast<const PullTensorResponse*>(
               &_PullTensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PullTensorResponse* other);
  friend void swap(PullTensorResponse& a, PullTensorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullTensorResponse* New() const final {
    return CreateMaybeMessage<PullTensorResponse>(nullptr);
  }

  PullTensorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullTensorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullTensorResponse& from);
  void MergeFrom(const PullTensorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullTensorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.PullTensorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fservice_2eproto);
    return ::descriptor_table_tcp_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);

  // bytes buf = 3;
  void clear_buf();
  static const int kBufFieldNumber = 3;
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);

  // int32 dst_rank = 1;
  void clear_dst_rank();
  static const int kDstRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_rank() const;
  void set_dst_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ptre.common.PullTensorResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PushTensorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.PushTensorRequest) */ {
 public:
  PushTensorRequest();
  virtual ~PushTensorRequest();

  PushTensorRequest(const PushTensorRequest& from);
  PushTensorRequest(PushTensorRequest&& from) noexcept
    : PushTensorRequest() {
    *this = ::std::move(from);
  }

  inline PushTensorRequest& operator=(const PushTensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTensorRequest& operator=(PushTensorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushTensorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushTensorRequest* internal_default_instance() {
    return reinterpret_cast<const PushTensorRequest*>(
               &_PushTensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PushTensorRequest* other);
  friend void swap(PushTensorRequest& a, PushTensorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushTensorRequest* New() const final {
    return CreateMaybeMessage<PushTensorRequest>(nullptr);
  }

  PushTensorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushTensorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushTensorRequest& from);
  void MergeFrom(const PushTensorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTensorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.PushTensorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fservice_2eproto);
    return ::descriptor_table_tcp_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);

  // bytes buf = 3;
  void clear_buf();
  static const int kBufFieldNumber = 3;
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);

  // int32 src_rank = 1;
  void clear_src_rank();
  static const int kSrcRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 src_rank() const;
  void set_src_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ptre.common.PushTensorRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PushTensorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.PushTensorResponse) */ {
 public:
  PushTensorResponse();
  virtual ~PushTensorResponse();

  PushTensorResponse(const PushTensorResponse& from);
  PushTensorResponse(PushTensorResponse&& from) noexcept
    : PushTensorResponse() {
    *this = ::std::move(from);
  }

  inline PushTensorResponse& operator=(const PushTensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTensorResponse& operator=(PushTensorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushTensorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushTensorResponse* internal_default_instance() {
    return reinterpret_cast<const PushTensorResponse*>(
               &_PushTensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PushTensorResponse* other);
  friend void swap(PushTensorResponse& a, PushTensorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushTensorResponse* New() const final {
    return CreateMaybeMessage<PushTensorResponse>(nullptr);
  }

  PushTensorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushTensorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushTensorResponse& from);
  void MergeFrom(const PushTensorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTensorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.PushTensorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fservice_2eproto);
    return ::descriptor_table_tcp_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);

  // int32 dst_rank = 1;
  void clear_dst_rank();
  static const int kDstRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_rank() const;
  void set_dst_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ptre.common.PushTensorResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PullTensorRequest

// int32 src_rank = 1;
inline void PullTensorRequest::clear_src_rank() {
  src_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullTensorRequest::src_rank() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorRequest.src_rank)
  return src_rank_;
}
inline void PullTensorRequest::set_src_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_rank_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorRequest.src_rank)
}

// string tensor_name = 2;
inline void PullTensorRequest::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PullTensorRequest::tensor_name() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorRequest.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void PullTensorRequest::set_tensor_name(const std::string& value) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorRequest.tensor_name)
}
inline void PullTensorRequest::set_tensor_name(std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PullTensorRequest.tensor_name)
}
inline void PullTensorRequest::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PullTensorRequest.tensor_name)
}
inline void PullTensorRequest::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PullTensorRequest.tensor_name)
}
inline std::string* PullTensorRequest::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PullTensorRequest.tensor_name)
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PullTensorRequest::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ptre.common.PullTensorRequest.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PullTensorRequest::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PullTensorRequest.tensor_name)
}

// int32 src_step = 3;
inline void PullTensorRequest::clear_src_step() {
  src_step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullTensorRequest::src_step() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorRequest.src_step)
  return src_step_;
}
inline void PullTensorRequest::set_src_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_step_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorRequest.src_step)
}

// .ptre.common.P2PSyncMode sync_mode = 4;
inline void PullTensorRequest::clear_sync_mode() {
  sync_mode_ = 0;
}
inline ::ptre::common::P2PSyncMode PullTensorRequest::sync_mode() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorRequest.sync_mode)
  return static_cast< ::ptre::common::P2PSyncMode >(sync_mode_);
}
inline void PullTensorRequest::set_sync_mode(::ptre::common::P2PSyncMode value) {
  
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorRequest.sync_mode)
}

// -------------------------------------------------------------------

// PullTensorResponse

// int32 dst_rank = 1;
inline void PullTensorResponse::clear_dst_rank() {
  dst_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullTensorResponse::dst_rank() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorResponse.dst_rank)
  return dst_rank_;
}
inline void PullTensorResponse::set_dst_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dst_rank_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorResponse.dst_rank)
}

// string tensor_name = 2;
inline void PullTensorResponse::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PullTensorResponse::tensor_name() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorResponse.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void PullTensorResponse::set_tensor_name(const std::string& value) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorResponse.tensor_name)
}
inline void PullTensorResponse::set_tensor_name(std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PullTensorResponse.tensor_name)
}
inline void PullTensorResponse::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PullTensorResponse.tensor_name)
}
inline void PullTensorResponse::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PullTensorResponse.tensor_name)
}
inline std::string* PullTensorResponse::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PullTensorResponse.tensor_name)
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PullTensorResponse::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ptre.common.PullTensorResponse.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PullTensorResponse::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PullTensorResponse.tensor_name)
}

// bytes buf = 3;
inline void PullTensorResponse::clear_buf() {
  buf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PullTensorResponse::buf() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorResponse.buf)
  return buf_.GetNoArena();
}
inline void PullTensorResponse::set_buf(const std::string& value) {
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorResponse.buf)
}
inline void PullTensorResponse::set_buf(std::string&& value) {
  
  buf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PullTensorResponse.buf)
}
inline void PullTensorResponse::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PullTensorResponse.buf)
}
inline void PullTensorResponse::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PullTensorResponse.buf)
}
inline std::string* PullTensorResponse::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PullTensorResponse.buf)
  return buf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PullTensorResponse::release_buf() {
  // @@protoc_insertion_point(field_release:ptre.common.PullTensorResponse.buf)
  
  return buf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PullTensorResponse::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PullTensorResponse.buf)
}

// int32 status = 4;
inline void PullTensorResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullTensorResponse::status() const {
  // @@protoc_insertion_point(field_get:ptre.common.PullTensorResponse.status)
  return status_;
}
inline void PullTensorResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PullTensorResponse.status)
}

// -------------------------------------------------------------------

// PushTensorRequest

// int32 src_rank = 1;
inline void PushTensorRequest::clear_src_rank() {
  src_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushTensorRequest::src_rank() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorRequest.src_rank)
  return src_rank_;
}
inline void PushTensorRequest::set_src_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_rank_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorRequest.src_rank)
}

// string tensor_name = 2;
inline void PushTensorRequest::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushTensorRequest::tensor_name() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorRequest.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void PushTensorRequest::set_tensor_name(const std::string& value) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorRequest.tensor_name)
}
inline void PushTensorRequest::set_tensor_name(std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PushTensorRequest.tensor_name)
}
inline void PushTensorRequest::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PushTensorRequest.tensor_name)
}
inline void PushTensorRequest::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PushTensorRequest.tensor_name)
}
inline std::string* PushTensorRequest::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PushTensorRequest.tensor_name)
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushTensorRequest::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ptre.common.PushTensorRequest.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushTensorRequest::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PushTensorRequest.tensor_name)
}

// bytes buf = 3;
inline void PushTensorRequest::clear_buf() {
  buf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushTensorRequest::buf() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorRequest.buf)
  return buf_.GetNoArena();
}
inline void PushTensorRequest::set_buf(const std::string& value) {
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorRequest.buf)
}
inline void PushTensorRequest::set_buf(std::string&& value) {
  
  buf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PushTensorRequest.buf)
}
inline void PushTensorRequest::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PushTensorRequest.buf)
}
inline void PushTensorRequest::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PushTensorRequest.buf)
}
inline std::string* PushTensorRequest::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PushTensorRequest.buf)
  return buf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushTensorRequest::release_buf() {
  // @@protoc_insertion_point(field_release:ptre.common.PushTensorRequest.buf)
  
  return buf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushTensorRequest::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PushTensorRequest.buf)
}

// -------------------------------------------------------------------

// PushTensorResponse

// int32 dst_rank = 1;
inline void PushTensorResponse::clear_dst_rank() {
  dst_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushTensorResponse::dst_rank() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorResponse.dst_rank)
  return dst_rank_;
}
inline void PushTensorResponse::set_dst_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dst_rank_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorResponse.dst_rank)
}

// string tensor_name = 2;
inline void PushTensorResponse::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushTensorResponse::tensor_name() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorResponse.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void PushTensorResponse::set_tensor_name(const std::string& value) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorResponse.tensor_name)
}
inline void PushTensorResponse::set_tensor_name(std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.PushTensorResponse.tensor_name)
}
inline void PushTensorResponse::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.PushTensorResponse.tensor_name)
}
inline void PushTensorResponse::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.PushTensorResponse.tensor_name)
}
inline std::string* PushTensorResponse::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.PushTensorResponse.tensor_name)
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushTensorResponse::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ptre.common.PushTensorResponse.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushTensorResponse::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.PushTensorResponse.tensor_name)
}

// int32 status = 3;
inline void PushTensorResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushTensorResponse::status() const {
  // @@protoc_insertion_point(field_get:ptre.common.PushTensorResponse.status)
  return status_;
}
inline void PushTensorResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.PushTensorResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace ptre

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ptre::common::P2PSyncMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ptre::common::P2PSyncMode>() {
  return ::ptre::common::P2PSyncMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tcp_5fservice_2eproto
