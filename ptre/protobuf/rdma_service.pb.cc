// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdma_service.proto

#include "rdma_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rdma_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Channel_rdma_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rdma_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryRegion_rdma_5fservice_2eproto;
namespace ptre {
class ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Channel> _instance;
} _Channel_default_instance_;
class MemoryRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryRegion> _instance;
} _MemoryRegion_default_instance_;
class GetRemoteEnvRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteEnvRequest> _instance;
} _GetRemoteEnvRequest_default_instance_;
class GetRemoteEnvResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteEnvResponse> _instance;
} _GetRemoteEnvResponse_default_instance_;
class GetRemoteAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteAddressRequest> _instance;
} _GetRemoteAddressRequest_default_instance_;
class GetRemoteAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteAddressResponse> _instance;
} _GetRemoteAddressResponse_default_instance_;
class GetRemoteParamAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteParamAddressRequest> _instance;
} _GetRemoteParamAddressRequest_default_instance_;
class GetRemoteParamAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemoteParamAddressResponse> _instance;
} _GetRemoteParamAddressResponse_default_instance_;
}  // namespace ptre
static void InitDefaultsscc_info_Channel_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_Channel_default_instance_;
    new (ptr) ::ptre::Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Channel_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Channel_rdma_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteAddressRequest_default_instance_;
    new (ptr) ::ptre::GetRemoteAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteAddressResponse_default_instance_;
    new (ptr) ::ptre::GetRemoteAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto}, {
      &scc_info_Channel_rdma_5fservice_2eproto.base,
      &scc_info_MemoryRegion_rdma_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetRemoteEnvRequest_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteEnvRequest_default_instance_;
    new (ptr) ::ptre::GetRemoteEnvRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteEnvRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRemoteEnvRequest_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRemoteEnvRequest_rdma_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetRemoteEnvResponse_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteEnvResponse_default_instance_;
    new (ptr) ::ptre::GetRemoteEnvResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteEnvResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRemoteEnvResponse_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRemoteEnvResponse_rdma_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetRemoteParamAddressRequest_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteParamAddressRequest_default_instance_;
    new (ptr) ::ptre::GetRemoteParamAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteParamAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRemoteParamAddressRequest_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRemoteParamAddressRequest_rdma_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_GetRemoteParamAddressResponse_default_instance_;
    new (ptr) ::ptre::GetRemoteParamAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::GetRemoteParamAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto}, {
      &scc_info_Channel_rdma_5fservice_2eproto.base,
      &scc_info_MemoryRegion_rdma_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_MemoryRegion_rdma_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::_MemoryRegion_default_instance_;
    new (ptr) ::ptre::MemoryRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::MemoryRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryRegion_rdma_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryRegion_rdma_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rdma_5fservice_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rdma_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rdma_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rdma_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, lid_),
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, qpn_),
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, psn_),
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, snp_),
  PROTOBUF_FIELD_OFFSET(::ptre::Channel, iid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::MemoryRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::MemoryRegion, remote_addr_),
  PROTOBUF_FIELD_OFFSET(::ptre::MemoryRegion, rkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvRequest, rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, lid_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, qpn_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, snp_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteEnvResponse, iid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressRequest, rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressRequest, tensor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressResponse, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressResponse, channel_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteAddressResponse, mr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressRequest, rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressResponse, channel_),
  PROTOBUF_FIELD_OFFSET(::ptre::GetRemoteParamAddressResponse, mr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ptre::Channel)},
  { 10, -1, sizeof(::ptre::MemoryRegion)},
  { 17, -1, sizeof(::ptre::GetRemoteEnvRequest)},
  { 23, -1, sizeof(::ptre::GetRemoteEnvResponse)},
  { 33, -1, sizeof(::ptre::GetRemoteAddressRequest)},
  { 40, -1, sizeof(::ptre::GetRemoteAddressResponse)},
  { 49, -1, sizeof(::ptre::GetRemoteParamAddressRequest)},
  { 55, -1, sizeof(::ptre::GetRemoteParamAddressResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_MemoryRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteEnvRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteEnvResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteParamAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::_GetRemoteParamAddressResponse_default_instance_),
};

const char descriptor_table_protodef_rdma_5fservice_2eproto[] =
  "\n\022rdma_service.proto\022\004ptre\"J\n\007Channel\022\013\n"
  "\003lid\030\001 \001(\005\022\013\n\003qpn\030\002 \001(\005\022\013\n\003psn\030\003 \001(\005\022\013\n\003"
  "snp\030\004 \001(\004\022\013\n\003iid\030\005 \001(\004\"1\n\014MemoryRegion\022\023"
  "\n\013remote_addr\030\001 \001(\004\022\014\n\004rkey\030\002 \001(\r\"#\n\023Get"
  "RemoteEnvRequest\022\014\n\004rank\030\001 \001(\005\"X\n\024GetRem"
  "oteEnvResponse\022\014\n\004rank\030\001 \001(\005\022\013\n\003lid\030\002 \001("
  "\005\022\013\n\003qpn\030\003 \001(\005\022\013\n\003snp\030\004 \001(\004\022\013\n\003iid\030\005 \001(\004"
  "\"<\n\027GetRemoteAddressRequest\022\014\n\004rank\030\001 \001("
  "\005\022\023\n\013tensor_name\030\002 \001(\t\"}\n\030GetRemoteAddre"
  "ssResponse\022\014\n\004rank\030\001 \001(\005\022\023\n\013tensor_name\030"
  "\002 \001(\t\022\036\n\007channel\030\003 \001(\0132\r.ptre.Channel\022\036\n"
  "\002mr\030\004 \003(\0132\022.ptre.MemoryRegion\",\n\034GetRemo"
  "teParamAddressRequest\022\014\n\004rank\030\001 \001(\005\"m\n\035G"
  "etRemoteParamAddressResponse\022\014\n\004rank\030\001 \001"
  "(\005\022\036\n\007channel\030\002 \001(\0132\r.ptre.Channel\022\036\n\002mr"
  "\030\003 \003(\0132\022.ptre.MemoryRegion2\202\002\n\004Rdma\022E\n\014G"
  "etRemoteEnv\022\031.ptre.GetRemoteEnvRequest\032\032"
  ".ptre.GetRemoteEnvResponse\022Q\n\020GetRemoteA"
  "ddress\022\035.ptre.GetRemoteAddressRequest\032\036."
  "ptre.GetRemoteAddressResponse\022`\n\025GetRemo"
  "teParamAddress\022\".ptre.GetRemoteParamAddr"
  "essRequest\032#.ptre.GetRemoteParamAddressR"
  "esponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rdma_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rdma_5fservice_2eproto_sccs[8] = {
  &scc_info_Channel_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteEnvRequest_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteEnvResponse_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteParamAddressRequest_rdma_5fservice_2eproto.base,
  &scc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto.base,
  &scc_info_MemoryRegion_rdma_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rdma_5fservice_2eproto_once;
static bool descriptor_table_rdma_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rdma_5fservice_2eproto = {
  &descriptor_table_rdma_5fservice_2eproto_initialized, descriptor_table_protodef_rdma_5fservice_2eproto, "rdma_service.proto", 895,
  &descriptor_table_rdma_5fservice_2eproto_once, descriptor_table_rdma_5fservice_2eproto_sccs, descriptor_table_rdma_5fservice_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_rdma_5fservice_2eproto::offsets,
  file_level_metadata_rdma_5fservice_2eproto, 8, file_level_enum_descriptors_rdma_5fservice_2eproto, file_level_service_descriptors_rdma_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rdma_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rdma_5fservice_2eproto), true);
namespace ptre {

// ===================================================================

void Channel::InitAsDefaultInstance() {
}
class Channel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kLidFieldNumber;
const int Channel::kQpnFieldNumber;
const int Channel::kPsnFieldNumber;
const int Channel::kSnpFieldNumber;
const int Channel::kIidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&psn_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(psn_));
  // @@protoc_insertion_point(copy_constructor:ptre.Channel)
}

void Channel::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psn_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(psn_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:ptre.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
}

void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Channel& Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Channel_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psn_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(psn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 qpn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          qpn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 psn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          psn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 snp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          snp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Channel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.Channel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 qpn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 psn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &psn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 snp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &snp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 iid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.Channel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Channel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lid = 1;
  if (this->lid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->lid(), output);
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->qpn(), output);
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->psn(), output);
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->snp(), output);
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->iid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.Channel)
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lid = 1;
  if (this->lid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->lid(), target);
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->qpn(), target);
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->psn(), target);
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->snp(), target);
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->iid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.Channel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lid = 1;
  if (this->lid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lid());
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->qpn());
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->snp());
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->iid());
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->psn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lid() != 0) {
    set_lid(from.lid());
  }
  if (from.qpn() != 0) {
    set_qpn(from.qpn());
  }
  if (from.snp() != 0) {
    set_snp(from.snp());
  }
  if (from.iid() != 0) {
    set_iid(from.iid());
  }
  if (from.psn() != 0) {
    set_psn(from.psn());
  }
}

void Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lid_, other->lid_);
  swap(qpn_, other->qpn_);
  swap(snp_, other->snp_);
  swap(iid_, other->iid_);
  swap(psn_, other->psn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryRegion::InitAsDefaultInstance() {
}
class MemoryRegion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryRegion::kRemoteAddrFieldNumber;
const int MemoryRegion::kRkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryRegion::MemoryRegion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.MemoryRegion)
}
MemoryRegion::MemoryRegion(const MemoryRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remote_addr_, &from.remote_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&rkey_) -
    reinterpret_cast<char*>(&remote_addr_)) + sizeof(rkey_));
  // @@protoc_insertion_point(copy_constructor:ptre.MemoryRegion)
}

void MemoryRegion::SharedCtor() {
  ::memset(&remote_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rkey_) -
      reinterpret_cast<char*>(&remote_addr_)) + sizeof(rkey_));
}

MemoryRegion::~MemoryRegion() {
  // @@protoc_insertion_point(destructor:ptre.MemoryRegion)
  SharedDtor();
}

void MemoryRegion::SharedDtor() {
}

void MemoryRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryRegion& MemoryRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryRegion_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MemoryRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.MemoryRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&remote_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rkey_) -
      reinterpret_cast<char*>(&remote_addr_)) + sizeof(rkey_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 remote_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          remote_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryRegion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.MemoryRegion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 remote_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rkey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.MemoryRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.MemoryRegion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryRegion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.MemoryRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->remote_addr(), output);
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->rkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.MemoryRegion)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryRegion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.MemoryRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->remote_addr(), target);
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->rkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.MemoryRegion)
  return target;
}

size_t MemoryRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.MemoryRegion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->remote_addr());
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rkey());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.MemoryRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.MemoryRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.MemoryRegion)
    MergeFrom(*source);
  }
}

void MemoryRegion::MergeFrom(const MemoryRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.MemoryRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_addr() != 0) {
    set_remote_addr(from.remote_addr());
  }
  if (from.rkey() != 0) {
    set_rkey(from.rkey());
  }
}

void MemoryRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.MemoryRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRegion::CopyFrom(const MemoryRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.MemoryRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRegion::IsInitialized() const {
  return true;
}

void MemoryRegion::Swap(MemoryRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryRegion::InternalSwap(MemoryRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(remote_addr_, other->remote_addr_);
  swap(rkey_, other->rkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteEnvRequest::InitAsDefaultInstance() {
}
class GetRemoteEnvRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteEnvRequest::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteEnvRequest::GetRemoteEnvRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteEnvRequest)
}
GetRemoteEnvRequest::GetRemoteEnvRequest(const GetRemoteEnvRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteEnvRequest)
}

void GetRemoteEnvRequest::SharedCtor() {
  rank_ = 0;
}

GetRemoteEnvRequest::~GetRemoteEnvRequest() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteEnvRequest)
  SharedDtor();
}

void GetRemoteEnvRequest::SharedDtor() {
}

void GetRemoteEnvRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteEnvRequest& GetRemoteEnvRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteEnvRequest_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteEnvRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteEnvRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteEnvRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteEnvRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteEnvRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteEnvRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteEnvRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteEnvRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteEnvRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteEnvRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteEnvRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteEnvRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteEnvRequest)
  return target;
}

size_t GetRemoteEnvRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteEnvRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteEnvRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteEnvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteEnvRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteEnvRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteEnvRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteEnvRequest)
    MergeFrom(*source);
  }
}

void GetRemoteEnvRequest::MergeFrom(const GetRemoteEnvRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteEnvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void GetRemoteEnvRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteEnvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteEnvRequest::CopyFrom(const GetRemoteEnvRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteEnvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteEnvRequest::IsInitialized() const {
  return true;
}

void GetRemoteEnvRequest::Swap(GetRemoteEnvRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteEnvRequest::InternalSwap(GetRemoteEnvRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteEnvRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteEnvResponse::InitAsDefaultInstance() {
}
class GetRemoteEnvResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteEnvResponse::kRankFieldNumber;
const int GetRemoteEnvResponse::kLidFieldNumber;
const int GetRemoteEnvResponse::kQpnFieldNumber;
const int GetRemoteEnvResponse::kSnpFieldNumber;
const int GetRemoteEnvResponse::kIidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteEnvResponse::GetRemoteEnvResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteEnvResponse)
}
GetRemoteEnvResponse::GetRemoteEnvResponse(const GetRemoteEnvResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&qpn_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(qpn_));
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteEnvResponse)
}

void GetRemoteEnvResponse::SharedCtor() {
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qpn_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(qpn_));
}

GetRemoteEnvResponse::~GetRemoteEnvResponse() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteEnvResponse)
  SharedDtor();
}

void GetRemoteEnvResponse::SharedDtor() {
}

void GetRemoteEnvResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteEnvResponse& GetRemoteEnvResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteEnvResponse_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteEnvResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteEnvResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qpn_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(qpn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteEnvResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 qpn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          qpn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 snp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          snp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteEnvResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteEnvResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 qpn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 snp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &snp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 iid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteEnvResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteEnvResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteEnvResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteEnvResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // int32 lid = 2;
  if (this->lid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->lid(), output);
  }

  // int32 qpn = 3;
  if (this->qpn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->qpn(), output);
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->snp(), output);
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->iid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteEnvResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteEnvResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteEnvResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // int32 lid = 2;
  if (this->lid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->lid(), target);
  }

  // int32 qpn = 3;
  if (this->qpn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->qpn(), target);
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->snp(), target);
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->iid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteEnvResponse)
  return target;
}

size_t GetRemoteEnvResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteEnvResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 lid = 2;
  if (this->lid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lid());
  }

  // uint64 snp = 4;
  if (this->snp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->snp());
  }

  // uint64 iid = 5;
  if (this->iid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->iid());
  }

  // int32 qpn = 3;
  if (this->qpn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->qpn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteEnvResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteEnvResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteEnvResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteEnvResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteEnvResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteEnvResponse)
    MergeFrom(*source);
  }
}

void GetRemoteEnvResponse::MergeFrom(const GetRemoteEnvResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteEnvResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.lid() != 0) {
    set_lid(from.lid());
  }
  if (from.snp() != 0) {
    set_snp(from.snp());
  }
  if (from.iid() != 0) {
    set_iid(from.iid());
  }
  if (from.qpn() != 0) {
    set_qpn(from.qpn());
  }
}

void GetRemoteEnvResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteEnvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteEnvResponse::CopyFrom(const GetRemoteEnvResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteEnvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteEnvResponse::IsInitialized() const {
  return true;
}

void GetRemoteEnvResponse::Swap(GetRemoteEnvResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteEnvResponse::InternalSwap(GetRemoteEnvResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rank_, other->rank_);
  swap(lid_, other->lid_);
  swap(snp_, other->snp_);
  swap(iid_, other->iid_);
  swap(qpn_, other->qpn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteEnvResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteAddressRequest::InitAsDefaultInstance() {
}
class GetRemoteAddressRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteAddressRequest::kRankFieldNumber;
const int GetRemoteAddressRequest::kTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteAddressRequest::GetRemoteAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteAddressRequest)
}
GetRemoteAddressRequest::GetRemoteAddressRequest(const GetRemoteAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteAddressRequest)
}

void GetRemoteAddressRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
}

GetRemoteAddressRequest::~GetRemoteAddressRequest() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteAddressRequest)
  SharedDtor();
}

void GetRemoteAddressRequest::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRemoteAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteAddressRequest& GetRemoteAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteAddressRequest_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.GetRemoteAddressRequest.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteAddressRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteAddressRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.GetRemoteAddressRequest.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteAddressRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteAddressRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.GetRemoteAddressRequest.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteAddressRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteAddressRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.GetRemoteAddressRequest.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteAddressRequest)
  return target;
}

size_t GetRemoteAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteAddressRequest)
    MergeFrom(*source);
  }
}

void GetRemoteAddressRequest::MergeFrom(const GetRemoteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void GetRemoteAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteAddressRequest::CopyFrom(const GetRemoteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteAddressRequest::IsInitialized() const {
  return true;
}

void GetRemoteAddressRequest::Swap(GetRemoteAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteAddressRequest::InternalSwap(GetRemoteAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteAddressResponse::InitAsDefaultInstance() {
  ::ptre::_GetRemoteAddressResponse_default_instance_._instance.get_mutable()->channel_ = const_cast< ::ptre::Channel*>(
      ::ptre::Channel::internal_default_instance());
}
class GetRemoteAddressResponse::HasBitSetters {
 public:
  static const ::ptre::Channel& channel(const GetRemoteAddressResponse* msg);
};

const ::ptre::Channel&
GetRemoteAddressResponse::HasBitSetters::channel(const GetRemoteAddressResponse* msg) {
  return *msg->channel_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteAddressResponse::kRankFieldNumber;
const int GetRemoteAddressResponse::kTensorNameFieldNumber;
const int GetRemoteAddressResponse::kChannelFieldNumber;
const int GetRemoteAddressResponse::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteAddressResponse::GetRemoteAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteAddressResponse)
}
GetRemoteAddressResponse::GetRemoteAddressResponse(const GetRemoteAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mr_(from.mr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.has_channel()) {
    channel_ = new ::ptre::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteAddressResponse)
}

void GetRemoteAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(rank_));
}

GetRemoteAddressResponse::~GetRemoteAddressResponse() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteAddressResponse)
  SharedDtor();
}

void GetRemoteAddressResponse::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void GetRemoteAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteAddressResponse& GetRemoteAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteAddressResponse_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mr_.Clear();
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.GetRemoteAddressResponse.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ptre.Channel channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ptre.MemoryRegion mr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteAddressResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteAddressResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.GetRemoteAddressResponse.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ptre.Channel channel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ptre.MemoryRegion mr = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteAddressResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteAddressResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.GetRemoteAddressResponse.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // .ptre.Channel channel = 3;
  if (this->has_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::channel(this), output);
  }

  // repeated .ptre.MemoryRegion mr = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->mr(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteAddressResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteAddressResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.GetRemoteAddressResponse.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // .ptre.Channel channel = 3;
  if (this->has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::channel(this), target);
  }

  // repeated .ptre.MemoryRegion mr = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->mr(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteAddressResponse)
  return target;
}

size_t GetRemoteAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteAddressResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ptre.MemoryRegion mr = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mr(static_cast<int>(i)));
    }
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // .ptre.Channel channel = 3;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteAddressResponse)
    MergeFrom(*source);
  }
}

void GetRemoteAddressResponse::MergeFrom(const GetRemoteAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mr_.MergeFrom(from.mr_);
  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.has_channel()) {
    mutable_channel()->::ptre::Channel::MergeFrom(from.channel());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void GetRemoteAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteAddressResponse::CopyFrom(const GetRemoteAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteAddressResponse::IsInitialized() const {
  return true;
}

void GetRemoteAddressResponse::Swap(GetRemoteAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteAddressResponse::InternalSwap(GetRemoteAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mr_)->InternalSwap(CastToBase(&other->mr_));
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteParamAddressRequest::InitAsDefaultInstance() {
}
class GetRemoteParamAddressRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteParamAddressRequest::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteParamAddressRequest::GetRemoteParamAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteParamAddressRequest)
}
GetRemoteParamAddressRequest::GetRemoteParamAddressRequest(const GetRemoteParamAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteParamAddressRequest)
}

void GetRemoteParamAddressRequest::SharedCtor() {
  rank_ = 0;
}

GetRemoteParamAddressRequest::~GetRemoteParamAddressRequest() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteParamAddressRequest)
  SharedDtor();
}

void GetRemoteParamAddressRequest::SharedDtor() {
}

void GetRemoteParamAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteParamAddressRequest& GetRemoteParamAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteParamAddressRequest_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteParamAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteParamAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteParamAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteParamAddressRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteParamAddressRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteParamAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteParamAddressRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteParamAddressRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteParamAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteParamAddressRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteParamAddressRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteParamAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteParamAddressRequest)
  return target;
}

size_t GetRemoteParamAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteParamAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteParamAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteParamAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteParamAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteParamAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteParamAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteParamAddressRequest)
    MergeFrom(*source);
  }
}

void GetRemoteParamAddressRequest::MergeFrom(const GetRemoteParamAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteParamAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void GetRemoteParamAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteParamAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteParamAddressRequest::CopyFrom(const GetRemoteParamAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteParamAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteParamAddressRequest::IsInitialized() const {
  return true;
}

void GetRemoteParamAddressRequest::Swap(GetRemoteParamAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteParamAddressRequest::InternalSwap(GetRemoteParamAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteParamAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRemoteParamAddressResponse::InitAsDefaultInstance() {
  ::ptre::_GetRemoteParamAddressResponse_default_instance_._instance.get_mutable()->channel_ = const_cast< ::ptre::Channel*>(
      ::ptre::Channel::internal_default_instance());
}
class GetRemoteParamAddressResponse::HasBitSetters {
 public:
  static const ::ptre::Channel& channel(const GetRemoteParamAddressResponse* msg);
};

const ::ptre::Channel&
GetRemoteParamAddressResponse::HasBitSetters::channel(const GetRemoteParamAddressResponse* msg) {
  return *msg->channel_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteParamAddressResponse::kRankFieldNumber;
const int GetRemoteParamAddressResponse::kChannelFieldNumber;
const int GetRemoteParamAddressResponse::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteParamAddressResponse::GetRemoteParamAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.GetRemoteParamAddressResponse)
}
GetRemoteParamAddressResponse::GetRemoteParamAddressResponse(const GetRemoteParamAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mr_(from.mr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::ptre::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.GetRemoteParamAddressResponse)
}

void GetRemoteParamAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(rank_));
}

GetRemoteParamAddressResponse::~GetRemoteParamAddressResponse() {
  // @@protoc_insertion_point(destructor:ptre.GetRemoteParamAddressResponse)
  SharedDtor();
}

void GetRemoteParamAddressResponse::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
}

void GetRemoteParamAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemoteParamAddressResponse& GetRemoteParamAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemoteParamAddressResponse_rdma_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRemoteParamAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.GetRemoteParamAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mr_.Clear();
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRemoteParamAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ptre.Channel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ptre.MemoryRegion mr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRemoteParamAddressResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.GetRemoteParamAddressResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ptre.Channel channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ptre.MemoryRegion mr = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.GetRemoteParamAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.GetRemoteParamAddressResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRemoteParamAddressResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.GetRemoteParamAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // .ptre.Channel channel = 2;
  if (this->has_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::channel(this), output);
  }

  // repeated .ptre.MemoryRegion mr = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->mr(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.GetRemoteParamAddressResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemoteParamAddressResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.GetRemoteParamAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // .ptre.Channel channel = 2;
  if (this->has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::channel(this), target);
  }

  // repeated .ptre.MemoryRegion mr = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mr(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.GetRemoteParamAddressResponse)
  return target;
}

size_t GetRemoteParamAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.GetRemoteParamAddressResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ptre.MemoryRegion mr = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mr(static_cast<int>(i)));
    }
  }

  // .ptre.Channel channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteParamAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.GetRemoteParamAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteParamAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemoteParamAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.GetRemoteParamAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.GetRemoteParamAddressResponse)
    MergeFrom(*source);
  }
}

void GetRemoteParamAddressResponse::MergeFrom(const GetRemoteParamAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.GetRemoteParamAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mr_.MergeFrom(from.mr_);
  if (from.has_channel()) {
    mutable_channel()->::ptre::Channel::MergeFrom(from.channel());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void GetRemoteParamAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.GetRemoteParamAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteParamAddressResponse::CopyFrom(const GetRemoteParamAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.GetRemoteParamAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteParamAddressResponse::IsInitialized() const {
  return true;
}

void GetRemoteParamAddressResponse::Swap(GetRemoteParamAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteParamAddressResponse::InternalSwap(GetRemoteParamAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mr_)->InternalSwap(CastToBase(&other->mr_));
  swap(channel_, other->channel_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemoteParamAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ptre
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ptre::Channel* Arena::CreateMaybeMessage< ::ptre::Channel >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::MemoryRegion* Arena::CreateMaybeMessage< ::ptre::MemoryRegion >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::MemoryRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteEnvRequest* Arena::CreateMaybeMessage< ::ptre::GetRemoteEnvRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteEnvRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteEnvResponse* Arena::CreateMaybeMessage< ::ptre::GetRemoteEnvResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteEnvResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteAddressRequest* Arena::CreateMaybeMessage< ::ptre::GetRemoteAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteAddressResponse* Arena::CreateMaybeMessage< ::ptre::GetRemoteAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteParamAddressRequest* Arena::CreateMaybeMessage< ::ptre::GetRemoteParamAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteParamAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::GetRemoteParamAddressResponse* Arena::CreateMaybeMessage< ::ptre::GetRemoteParamAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::GetRemoteParamAddressResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
