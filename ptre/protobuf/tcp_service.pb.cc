// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_service.proto

#include "tcp_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ptre {
namespace common {
class PullTensorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullTensorRequest> _instance;
} _PullTensorRequest_default_instance_;
class PullTensorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullTensorResponse> _instance;
} _PullTensorResponse_default_instance_;
class PushTensorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushTensorRequest> _instance;
} _PushTensorRequest_default_instance_;
class PushTensorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushTensorResponse> _instance;
} _PushTensorResponse_default_instance_;
}  // namespace common
}  // namespace ptre
static void InitDefaultsscc_info_PullTensorRequest_tcp_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::common::_PullTensorRequest_default_instance_;
    new (ptr) ::ptre::common::PullTensorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::common::PullTensorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullTensorRequest_tcp_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PullTensorRequest_tcp_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_PullTensorResponse_tcp_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::common::_PullTensorResponse_default_instance_;
    new (ptr) ::ptre::common::PullTensorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::common::PullTensorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullTensorResponse_tcp_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PullTensorResponse_tcp_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_PushTensorRequest_tcp_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::common::_PushTensorRequest_default_instance_;
    new (ptr) ::ptre::common::PushTensorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::common::PushTensorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushTensorRequest_tcp_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PushTensorRequest_tcp_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_PushTensorResponse_tcp_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ptre::common::_PushTensorResponse_default_instance_;
    new (ptr) ::ptre::common::PushTensorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ptre::common::PushTensorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushTensorResponse_tcp_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PushTensorResponse_tcp_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tcp_5fservice_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tcp_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tcp_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tcp_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorRequest, src_rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorRequest, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorRequest, src_step_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorRequest, sync_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorResponse, dst_rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorResponse, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorResponse, buf_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PullTensorResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorRequest, src_rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorRequest, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorRequest, buf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorResponse, dst_rank_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorResponse, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::ptre::common::PushTensorResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ptre::common::PullTensorRequest)},
  { 9, -1, sizeof(::ptre::common::PullTensorResponse)},
  { 18, -1, sizeof(::ptre::common::PushTensorRequest)},
  { 26, -1, sizeof(::ptre::common::PushTensorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::common::_PullTensorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::common::_PullTensorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::common::_PushTensorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ptre::common::_PushTensorResponse_default_instance_),
};

const char descriptor_table_protodef_tcp_5fservice_2eproto[] =
  "\n\021tcp_service.proto\022\013ptre.common\"y\n\021Pull"
  "TensorRequest\022\020\n\010src_rank\030\001 \001(\005\022\023\n\013tenso"
  "r_name\030\002 \001(\t\022\020\n\010src_step\030\003 \001(\005\022+\n\tsync_m"
  "ode\030\004 \001(\0162\030.ptre.common.P2PSyncMode\"X\n\022P"
  "ullTensorResponse\022\020\n\010dst_rank\030\001 \001(\005\022\023\n\013t"
  "ensor_name\030\002 \001(\t\022\013\n\003buf\030\003 \001(\014\022\016\n\006status\030"
  "\004 \001(\005\"G\n\021PushTensorRequest\022\020\n\010src_rank\030\001"
  " \001(\005\022\023\n\013tensor_name\030\002 \001(\t\022\013\n\003buf\030\003 \001(\014\"K"
  "\n\022PushTensorResponse\022\020\n\010dst_rank\030\001 \001(\005\022\023"
  "\n\013tensor_name\030\002 \001(\t\022\016\n\006status\030\003 \001(\005*%\n\013P"
  "2PSyncMode\022\026\n\022P2P_SYNC_MODE_STEP\020\0002\247\001\n\003T"
  "cp\022O\n\nPullTensor\022\036.ptre.common.PullTenso"
  "rRequest\032\037.ptre.common.PullTensorRespons"
  "e\"\000\022O\n\nPushTensor\022\036.ptre.common.PushTens"
  "orRequest\032\037.ptre.common.PushTensorRespon"
  "se\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tcp_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tcp_5fservice_2eproto_sccs[4] = {
  &scc_info_PullTensorRequest_tcp_5fservice_2eproto.base,
  &scc_info_PullTensorResponse_tcp_5fservice_2eproto.base,
  &scc_info_PushTensorRequest_tcp_5fservice_2eproto.base,
  &scc_info_PushTensorResponse_tcp_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tcp_5fservice_2eproto_once;
static bool descriptor_table_tcp_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tcp_5fservice_2eproto = {
  &descriptor_table_tcp_5fservice_2eproto_initialized, descriptor_table_protodef_tcp_5fservice_2eproto, "tcp_service.proto", 612,
  &descriptor_table_tcp_5fservice_2eproto_once, descriptor_table_tcp_5fservice_2eproto_sccs, descriptor_table_tcp_5fservice_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tcp_5fservice_2eproto::offsets,
  file_level_metadata_tcp_5fservice_2eproto, 4, file_level_enum_descriptors_tcp_5fservice_2eproto, file_level_service_descriptors_tcp_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tcp_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tcp_5fservice_2eproto), true);
namespace ptre {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2PSyncMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tcp_5fservice_2eproto);
  return file_level_enum_descriptors_tcp_5fservice_2eproto[0];
}
bool P2PSyncMode_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PullTensorRequest::InitAsDefaultInstance() {
}
class PullTensorRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullTensorRequest::kSrcRankFieldNumber;
const int PullTensorRequest::kTensorNameFieldNumber;
const int PullTensorRequest::kSrcStepFieldNumber;
const int PullTensorRequest::kSyncModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullTensorRequest::PullTensorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.common.PullTensorRequest)
}
PullTensorRequest::PullTensorRequest(const PullTensorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  ::memcpy(&src_rank_, &from.src_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_mode_) -
    reinterpret_cast<char*>(&src_rank_)) + sizeof(sync_mode_));
  // @@protoc_insertion_point(copy_constructor:ptre.common.PullTensorRequest)
}

void PullTensorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullTensorRequest_tcp_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&src_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_mode_) -
      reinterpret_cast<char*>(&src_rank_)) + sizeof(sync_mode_));
}

PullTensorRequest::~PullTensorRequest() {
  // @@protoc_insertion_point(destructor:ptre.common.PullTensorRequest)
  SharedDtor();
}

void PullTensorRequest::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PullTensorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullTensorRequest& PullTensorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullTensorRequest_tcp_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PullTensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.common.PullTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&src_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_mode_) -
      reinterpret_cast<char*>(&src_rank_)) + sizeof(sync_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PullTensorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 src_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          src_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.common.PullTensorRequest.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ptre.common.P2PSyncMode sync_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_sync_mode(static_cast<::ptre::common::P2PSyncMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PullTensorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.common.PullTensorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src_rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.common.PullTensorRequest.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 src_step = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ptre.common.P2PSyncMode sync_mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sync_mode(static_cast< ::ptre::common::P2PSyncMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.common.PullTensorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.common.PullTensorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PullTensorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.common.PullTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->src_rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PullTensorRequest.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // int32 src_step = 3;
  if (this->src_step() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->src_step(), output);
  }

  // .ptre.common.P2PSyncMode sync_mode = 4;
  if (this->sync_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->sync_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.common.PullTensorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PullTensorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.common.PullTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->src_rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PullTensorRequest.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // int32 src_step = 3;
  if (this->src_step() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->src_step(), target);
  }

  // .ptre.common.P2PSyncMode sync_mode = 4;
  if (this->sync_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->sync_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.common.PullTensorRequest)
  return target;
}

size_t PullTensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.common.PullTensorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->src_rank());
  }

  // int32 src_step = 3;
  if (this->src_step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->src_step());
  }

  // .ptre.common.P2PSyncMode sync_mode = 4;
  if (this->sync_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sync_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullTensorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.common.PullTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullTensorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullTensorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.common.PullTensorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.common.PullTensorRequest)
    MergeFrom(*source);
  }
}

void PullTensorRequest::MergeFrom(const PullTensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.common.PullTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.src_rank() != 0) {
    set_src_rank(from.src_rank());
  }
  if (from.src_step() != 0) {
    set_src_step(from.src_step());
  }
  if (from.sync_mode() != 0) {
    set_sync_mode(from.sync_mode());
  }
}

void PullTensorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.common.PullTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullTensorRequest::CopyFrom(const PullTensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.common.PullTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTensorRequest::IsInitialized() const {
  return true;
}

void PullTensorRequest::Swap(PullTensorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullTensorRequest::InternalSwap(PullTensorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(src_rank_, other->src_rank_);
  swap(src_step_, other->src_step_);
  swap(sync_mode_, other->sync_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullTensorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullTensorResponse::InitAsDefaultInstance() {
}
class PullTensorResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullTensorResponse::kDstRankFieldNumber;
const int PullTensorResponse::kTensorNameFieldNumber;
const int PullTensorResponse::kBufFieldNumber;
const int PullTensorResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullTensorResponse::PullTensorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.common.PullTensorResponse)
}
PullTensorResponse::PullTensorResponse(const PullTensorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.buf().size() > 0) {
    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  ::memcpy(&dst_rank_, &from.dst_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ptre.common.PullTensorResponse)
}

void PullTensorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullTensorResponse_tcp_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
}

PullTensorResponse::~PullTensorResponse() {
  // @@protoc_insertion_point(destructor:ptre.common.PullTensorResponse)
  SharedDtor();
}

void PullTensorResponse::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PullTensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullTensorResponse& PullTensorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullTensorResponse_tcp_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PullTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.common.PullTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PullTensorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dst_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dst_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.common.PullTensorResponse.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PullTensorResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.common.PullTensorResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dst_rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.common.PullTensorResponse.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.common.PullTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.common.PullTensorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PullTensorResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.common.PullTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->dst_rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PullTensorResponse.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buf(), output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.common.PullTensorResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PullTensorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.common.PullTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->dst_rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PullTensorResponse.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->buf(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.common.PullTensorResponse)
  return target;
}

size_t PullTensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.common.PullTensorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dst_rank());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullTensorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.common.PullTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PullTensorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullTensorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.common.PullTensorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.common.PullTensorResponse)
    MergeFrom(*source);
  }
}

void PullTensorResponse::MergeFrom(const PullTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.common.PullTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.dst_rank() != 0) {
    set_dst_rank(from.dst_rank());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PullTensorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.common.PullTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullTensorResponse::CopyFrom(const PullTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.common.PullTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTensorResponse::IsInitialized() const {
  return true;
}

void PullTensorResponse::Swap(PullTensorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullTensorResponse::InternalSwap(PullTensorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dst_rank_, other->dst_rank_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullTensorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushTensorRequest::InitAsDefaultInstance() {
}
class PushTensorRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushTensorRequest::kSrcRankFieldNumber;
const int PushTensorRequest::kTensorNameFieldNumber;
const int PushTensorRequest::kBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushTensorRequest::PushTensorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.common.PushTensorRequest)
}
PushTensorRequest::PushTensorRequest(const PushTensorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.buf().size() > 0) {
    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  src_rank_ = from.src_rank_;
  // @@protoc_insertion_point(copy_constructor:ptre.common.PushTensorRequest)
}

void PushTensorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushTensorRequest_tcp_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_rank_ = 0;
}

PushTensorRequest::~PushTensorRequest() {
  // @@protoc_insertion_point(destructor:ptre.common.PushTensorRequest)
  SharedDtor();
}

void PushTensorRequest::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushTensorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushTensorRequest& PushTensorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushTensorRequest_tcp_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PushTensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.common.PushTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushTensorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 src_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          src_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.common.PushTensorRequest.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushTensorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.common.PushTensorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src_rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.common.PushTensorRequest.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.common.PushTensorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.common.PushTensorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushTensorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.common.PushTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->src_rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PushTensorRequest.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.common.PushTensorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushTensorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.common.PushTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->src_rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PushTensorRequest.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->buf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.common.PushTensorRequest)
  return target;
}

size_t PushTensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.common.PushTensorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // bytes buf = 3;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  // int32 src_rank = 1;
  if (this->src_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->src_rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushTensorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.common.PushTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushTensorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushTensorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.common.PushTensorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.common.PushTensorRequest)
    MergeFrom(*source);
  }
}

void PushTensorRequest::MergeFrom(const PushTensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.common.PushTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.src_rank() != 0) {
    set_src_rank(from.src_rank());
  }
}

void PushTensorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.common.PushTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushTensorRequest::CopyFrom(const PushTensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.common.PushTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTensorRequest::IsInitialized() const {
  return true;
}

void PushTensorRequest::Swap(PushTensorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushTensorRequest::InternalSwap(PushTensorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(src_rank_, other->src_rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushTensorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushTensorResponse::InitAsDefaultInstance() {
}
class PushTensorResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushTensorResponse::kDstRankFieldNumber;
const int PushTensorResponse::kTensorNameFieldNumber;
const int PushTensorResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushTensorResponse::PushTensorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ptre.common.PushTensorResponse)
}
PushTensorResponse::PushTensorResponse(const PushTensorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  ::memcpy(&dst_rank_, &from.dst_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ptre.common.PushTensorResponse)
}

void PushTensorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushTensorResponse_tcp_5fservice_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
}

PushTensorResponse::~PushTensorResponse() {
  // @@protoc_insertion_point(destructor:ptre.common.PushTensorResponse)
  SharedDtor();
}

void PushTensorResponse::SharedDtor() {
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushTensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushTensorResponse& PushTensorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushTensorResponse_tcp_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PushTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ptre.common.PushTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dst_rank_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushTensorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dst_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dst_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensor_name(), ptr, ctx, "ptre.common.PushTensorResponse.tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushTensorResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ptre.common.PushTensorResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dst_rank = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ptre.common.PushTensorResponse.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ptre.common.PushTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ptre.common.PushTensorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushTensorResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ptre.common.PushTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->dst_rank(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PushTensorResponse.tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ptre.common.PushTensorResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushTensorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ptre.common.PushTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->dst_rank(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ptre.common.PushTensorResponse.tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ptre.common.PushTensorResponse)
  return target;
}

size_t PushTensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ptre.common.PushTensorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // int32 dst_rank = 1;
  if (this->dst_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dst_rank());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushTensorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ptre.common.PushTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushTensorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushTensorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ptre.common.PushTensorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ptre.common.PushTensorResponse)
    MergeFrom(*source);
  }
}

void PushTensorResponse::MergeFrom(const PushTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ptre.common.PushTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.dst_rank() != 0) {
    set_dst_rank(from.dst_rank());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PushTensorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ptre.common.PushTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushTensorResponse::CopyFrom(const PushTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ptre.common.PushTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTensorResponse::IsInitialized() const {
  return true;
}

void PushTensorResponse::Swap(PushTensorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushTensorResponse::InternalSwap(PushTensorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dst_rank_, other->dst_rank_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushTensorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace ptre
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ptre::common::PullTensorRequest* Arena::CreateMaybeMessage< ::ptre::common::PullTensorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::common::PullTensorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::common::PullTensorResponse* Arena::CreateMaybeMessage< ::ptre::common::PullTensorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::common::PullTensorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::common::PushTensorRequest* Arena::CreateMaybeMessage< ::ptre::common::PushTensorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::common::PushTensorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ptre::common::PushTensorResponse* Arena::CreateMaybeMessage< ::ptre::common::PushTensorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ptre::common::PushTensorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
