// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace ptre {
namespace common {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RequestList;
class RequestListDefaultTypeInternal;
extern RequestListDefaultTypeInternal _RequestList_default_instance_;
class ResponseListProto;
class ResponseListProtoDefaultTypeInternal;
extern ResponseListProtoDefaultTypeInternal _ResponseListProto_default_instance_;
class ResponseProto;
class ResponseProtoDefaultTypeInternal;
extern ResponseProtoDefaultTypeInternal _ResponseProto_default_instance_;
}  // namespace common
}  // namespace ptre
PROTOBUF_NAMESPACE_OPEN
template<> ::ptre::common::Request* Arena::CreateMaybeMessage<::ptre::common::Request>(Arena*);
template<> ::ptre::common::RequestList* Arena::CreateMaybeMessage<::ptre::common::RequestList>(Arena*);
template<> ::ptre::common::ResponseListProto* Arena::CreateMaybeMessage<::ptre::common::ResponseListProto>(Arena*);
template<> ::ptre::common::ResponseProto* Arena::CreateMaybeMessage<::ptre::common::ResponseProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ptre {
namespace common {

enum RequestType : int {
  REQUEST_TYPE_ALLREDUCE = 0,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = REQUEST_TYPE_ALLREDUCE;
constexpr RequestType RequestType_MAX = REQUEST_TYPE_ALLREDUCE;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    const std::string& name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ResponseType : int {
  RESPONSE_TYPE_ALLREDUCE = 0,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = RESPONSE_TYPE_ALLREDUCE;
constexpr ResponseType ResponseType_MAX = RESPONSE_TYPE_ALLREDUCE;
constexpr int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor();
template<typename T>
inline const std::string& ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseType_descriptor(), enum_t_value);
}
inline bool ResponseType_Parse(
    const std::string& name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);

  // int32 request_rank = 1;
  void clear_request_rank();
  static const int kRequestRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 request_rank() const;
  void set_request_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tensor_type = 3;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 tensor_type() const;
  void set_tensor_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ptre.common.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 tensor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RequestList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.RequestList) */ {
 public:
  RequestList();
  virtual ~RequestList();

  RequestList(const RequestList& from);
  RequestList(RequestList&& from) noexcept
    : RequestList() {
    *this = ::std::move(from);
  }

  inline RequestList& operator=(const RequestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestList& operator=(RequestList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestList* internal_default_instance() {
    return reinterpret_cast<const RequestList*>(
               &_RequestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestList* other);
  friend void swap(RequestList& a, RequestList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestList* New() const final {
    return CreateMaybeMessage<RequestList>(nullptr);
  }

  RequestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestList& from);
  void MergeFrom(const RequestList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.RequestList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ptre.common.Request requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  ::ptre::common::Request* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::Request >*
      mutable_requests();
  const ::ptre::common::Request& requests(int index) const;
  ::ptre::common::Request* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::Request >&
      requests() const;

  // @@protoc_insertion_point(class_scope:ptre.common.RequestList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::Request > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.ResponseProto) */ {
 public:
  ResponseProto();
  virtual ~ResponseProto();

  ResponseProto(const ResponseProto& from);
  ResponseProto(ResponseProto&& from) noexcept
    : ResponseProto() {
    *this = ::std::move(from);
  }

  inline ResponseProto& operator=(const ResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseProto& operator=(ResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseProto* internal_default_instance() {
    return reinterpret_cast<const ResponseProto*>(
               &_ResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResponseProto* other);
  friend void swap(ResponseProto& a, ResponseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseProto* New() const final {
    return CreateMaybeMessage<ResponseProto>(nullptr);
  }

  ResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseProto& from);
  void MergeFrom(const ResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.ResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tensor_names = 2;
  int tensor_names_size() const;
  void clear_tensor_names();
  static const int kTensorNamesFieldNumber = 2;
  const std::string& tensor_names(int index) const;
  std::string* mutable_tensor_names(int index);
  void set_tensor_names(int index, const std::string& value);
  void set_tensor_names(int index, std::string&& value);
  void set_tensor_names(int index, const char* value);
  void set_tensor_names(int index, const char* value, size_t size);
  std::string* add_tensor_names();
  void add_tensor_names(const std::string& value);
  void add_tensor_names(std::string&& value);
  void add_tensor_names(const char* value);
  void add_tensor_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tensor_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tensor_names();

  // repeated int32 devices = 4;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 devices(int index) const;
  void set_devices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_devices();

  // repeated int64 tensor_sizes = 5;
  int tensor_sizes_size() const;
  void clear_tensor_sizes();
  static const int kTensorSizesFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 tensor_sizes(int index) const;
  void set_tensor_sizes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_tensor_sizes(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      tensor_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_tensor_sizes();

  // .ptre.common.ResponseType response_type = 1;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 1;
  ::ptre::common::ResponseType response_type() const;
  void set_response_type(::ptre::common::ResponseType value);

  // int32 tensor_type = 3;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 tensor_type() const;
  void set_tensor_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ptre.common.ResponseProto)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tensor_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > devices_;
  mutable std::atomic<int> _devices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > tensor_sizes_;
  mutable std::atomic<int> _tensor_sizes_cached_byte_size_;
  int response_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 tensor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ResponseListProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ptre.common.ResponseListProto) */ {
 public:
  ResponseListProto();
  virtual ~ResponseListProto();

  ResponseListProto(const ResponseListProto& from);
  ResponseListProto(ResponseListProto&& from) noexcept
    : ResponseListProto() {
    *this = ::std::move(from);
  }

  inline ResponseListProto& operator=(const ResponseListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseListProto& operator=(ResponseListProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseListProto* internal_default_instance() {
    return reinterpret_cast<const ResponseListProto*>(
               &_ResponseListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResponseListProto* other);
  friend void swap(ResponseListProto& a, ResponseListProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseListProto* New() const final {
    return CreateMaybeMessage<ResponseListProto>(nullptr);
  }

  ResponseListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseListProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseListProto& from);
  void MergeFrom(const ResponseListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ptre.common.ResponseListProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ptre.common.ResponseProto responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  ::ptre::common::ResponseProto* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::ResponseProto >*
      mutable_responses();
  const ::ptre::common::ResponseProto& responses(int index) const;
  ::ptre::common::ResponseProto* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::ResponseProto >&
      responses() const;

  // @@protoc_insertion_point(class_scope:ptre.common.ResponseListProto)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::ResponseProto > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// int32 request_rank = 1;
inline void Request::clear_request_rank() {
  request_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::request_rank() const {
  // @@protoc_insertion_point(field_get:ptre.common.Request.request_rank)
  return request_rank_;
}
inline void Request::set_request_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_rank_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.Request.request_rank)
}

// string tensor_name = 2;
inline void Request::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::tensor_name() const {
  // @@protoc_insertion_point(field_get:ptre.common.Request.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void Request::set_tensor_name(const std::string& value) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ptre.common.Request.tensor_name)
}
inline void Request::set_tensor_name(std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ptre.common.Request.tensor_name)
}
inline void Request::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ptre.common.Request.tensor_name)
}
inline void Request::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ptre.common.Request.tensor_name)
}
inline std::string* Request::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:ptre.common.Request.tensor_name)
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ptre.common.Request.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ptre.common.Request.tensor_name)
}

// int32 tensor_type = 3;
inline void Request::clear_tensor_type() {
  tensor_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::tensor_type() const {
  // @@protoc_insertion_point(field_get:ptre.common.Request.tensor_type)
  return tensor_type_;
}
inline void Request::set_tensor_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tensor_type_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.Request.tensor_type)
}

// -------------------------------------------------------------------

// RequestList

// repeated .ptre.common.Request requests = 1;
inline int RequestList::requests_size() const {
  return requests_.size();
}
inline void RequestList::clear_requests() {
  requests_.Clear();
}
inline ::ptre::common::Request* RequestList::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:ptre.common.RequestList.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::Request >*
RequestList::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:ptre.common.RequestList.requests)
  return &requests_;
}
inline const ::ptre::common::Request& RequestList::requests(int index) const {
  // @@protoc_insertion_point(field_get:ptre.common.RequestList.requests)
  return requests_.Get(index);
}
inline ::ptre::common::Request* RequestList::add_requests() {
  // @@protoc_insertion_point(field_add:ptre.common.RequestList.requests)
  return requests_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::Request >&
RequestList::requests() const {
  // @@protoc_insertion_point(field_list:ptre.common.RequestList.requests)
  return requests_;
}

// -------------------------------------------------------------------

// ResponseProto

// .ptre.common.ResponseType response_type = 1;
inline void ResponseProto::clear_response_type() {
  response_type_ = 0;
}
inline ::ptre::common::ResponseType ResponseProto::response_type() const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseProto.response_type)
  return static_cast< ::ptre::common::ResponseType >(response_type_);
}
inline void ResponseProto::set_response_type(::ptre::common::ResponseType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.response_type)
}

// repeated string tensor_names = 2;
inline int ResponseProto::tensor_names_size() const {
  return tensor_names_.size();
}
inline void ResponseProto::clear_tensor_names() {
  tensor_names_.Clear();
}
inline const std::string& ResponseProto::tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseProto.tensor_names)
  return tensor_names_.Get(index);
}
inline std::string* ResponseProto::mutable_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:ptre.common.ResponseProto.tensor_names)
  return tensor_names_.Mutable(index);
}
inline void ResponseProto::set_tensor_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.tensor_names)
  tensor_names_.Mutable(index)->assign(value);
}
inline void ResponseProto::set_tensor_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.tensor_names)
  tensor_names_.Mutable(index)->assign(std::move(value));
}
inline void ResponseProto::set_tensor_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tensor_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ptre.common.ResponseProto.tensor_names)
}
inline void ResponseProto::set_tensor_names(int index, const char* value, size_t size) {
  tensor_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ptre.common.ResponseProto.tensor_names)
}
inline std::string* ResponseProto::add_tensor_names() {
  // @@protoc_insertion_point(field_add_mutable:ptre.common.ResponseProto.tensor_names)
  return tensor_names_.Add();
}
inline void ResponseProto::add_tensor_names(const std::string& value) {
  tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ptre.common.ResponseProto.tensor_names)
}
inline void ResponseProto::add_tensor_names(std::string&& value) {
  tensor_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ptre.common.ResponseProto.tensor_names)
}
inline void ResponseProto::add_tensor_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ptre.common.ResponseProto.tensor_names)
}
inline void ResponseProto::add_tensor_names(const char* value, size_t size) {
  tensor_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ptre.common.ResponseProto.tensor_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResponseProto::tensor_names() const {
  // @@protoc_insertion_point(field_list:ptre.common.ResponseProto.tensor_names)
  return tensor_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResponseProto::mutable_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:ptre.common.ResponseProto.tensor_names)
  return &tensor_names_;
}

// int32 tensor_type = 3;
inline void ResponseProto::clear_tensor_type() {
  tensor_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseProto.tensor_type)
  return tensor_type_;
}
inline void ResponseProto::set_tensor_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tensor_type_ = value;
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.tensor_type)
}

// repeated int32 devices = 4;
inline int ResponseProto::devices_size() const {
  return devices_.size();
}
inline void ResponseProto::clear_devices() {
  devices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseProto::devices(int index) const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseProto.devices)
  return devices_.Get(index);
}
inline void ResponseProto::set_devices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  devices_.Set(index, value);
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.devices)
}
inline void ResponseProto::add_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  devices_.Add(value);
  // @@protoc_insertion_point(field_add:ptre.common.ResponseProto.devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResponseProto::devices() const {
  // @@protoc_insertion_point(field_list:ptre.common.ResponseProto.devices)
  return devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResponseProto::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:ptre.common.ResponseProto.devices)
  return &devices_;
}

// repeated int64 tensor_sizes = 5;
inline int ResponseProto::tensor_sizes_size() const {
  return tensor_sizes_.size();
}
inline void ResponseProto::clear_tensor_sizes() {
  tensor_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseProto::tensor_sizes(int index) const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseProto.tensor_sizes)
  return tensor_sizes_.Get(index);
}
inline void ResponseProto::set_tensor_sizes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  tensor_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ptre.common.ResponseProto.tensor_sizes)
}
inline void ResponseProto::add_tensor_sizes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  tensor_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:ptre.common.ResponseProto.tensor_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ResponseProto::tensor_sizes() const {
  // @@protoc_insertion_point(field_list:ptre.common.ResponseProto.tensor_sizes)
  return tensor_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ResponseProto::mutable_tensor_sizes() {
  // @@protoc_insertion_point(field_mutable_list:ptre.common.ResponseProto.tensor_sizes)
  return &tensor_sizes_;
}

// -------------------------------------------------------------------

// ResponseListProto

// repeated .ptre.common.ResponseProto responses = 1;
inline int ResponseListProto::responses_size() const {
  return responses_.size();
}
inline void ResponseListProto::clear_responses() {
  responses_.Clear();
}
inline ::ptre::common::ResponseProto* ResponseListProto::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:ptre.common.ResponseListProto.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::ResponseProto >*
ResponseListProto::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:ptre.common.ResponseListProto.responses)
  return &responses_;
}
inline const ::ptre::common::ResponseProto& ResponseListProto::responses(int index) const {
  // @@protoc_insertion_point(field_get:ptre.common.ResponseListProto.responses)
  return responses_.Get(index);
}
inline ::ptre::common::ResponseProto* ResponseListProto::add_responses() {
  // @@protoc_insertion_point(field_add:ptre.common.ResponseListProto.responses)
  return responses_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ptre::common::ResponseProto >&
ResponseListProto::responses() const {
  // @@protoc_insertion_point(field_list:ptre.common.ResponseListProto.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace ptre

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ptre::common::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ptre::common::RequestType>() {
  return ::ptre::common::RequestType_descriptor();
}
template <> struct is_proto_enum< ::ptre::common::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ptre::common::ResponseType>() {
  return ::ptre::common::ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
